<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20224.22.1117.1841                               -->
<workbook original-version='18.1' source-build='2022.4.0 (20224.22.1117.1841)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='US Cities Koppen Climate and Classification' inline='true' name='federated.05ykz9c12oxj0p1dbo5t61dsayjt' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='US Cities Koppen Climate and Classification' name='textscan.11jprsg1on3csi13gpz9d1xda9nv'>
            <connection class='textscan' directory='C:/Users/DELL/SI 649/group project' filename='US Cities Koppen Climate and Classification.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.11jprsg1on3csi13gpz9d1xda9nv' name='US Cities Koppen Climate and Classification.csv' table='[US Cities Koppen Climate and Classification#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='(&apos;info&apos;, &apos;code&apos;)' ordinal='1' />
            <column datatype='string' name='(&apos;info&apos;, &apos;station&apos;)' ordinal='2' />
            <column datatype='string' name='(&apos;info&apos;, &apos;state&apos;)' ordinal='3' />
            <column datatype='real' name='(&apos;info&apos;, &apos;latitude (degr)&apos;)' ordinal='4' />
            <column datatype='real' name='(&apos;info&apos;, &apos;longitude (degr)&apos;)' ordinal='5' />
            <column datatype='real' name='(&apos;info&apos;, &apos;elevation (ft)&apos;)' ordinal='6' />
            <column datatype='real' name='(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)' ordinal='7' />
            <column datatype='string' name='(&apos;info&apos;, &apos;Koppen climate&apos;)' ordinal='8' />
            <column datatype='integer' name='(&apos;info&apos;, &apos;YRS&apos;)' ordinal='9' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;JAN&apos;)' ordinal='10' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;FEB&apos;)' ordinal='11' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;MAR&apos;)' ordinal='12' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;APR&apos;)' ordinal='13' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;MAY&apos;)' ordinal='14' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;JUN&apos;)' ordinal='15' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;JUL&apos;)' ordinal='16' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;AUG&apos;)' ordinal='17' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;SEP&apos;)' ordinal='18' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;OCT&apos;)' ordinal='19' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;NOV&apos;)' ordinal='20' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;DEC&apos;)' ordinal='21' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;ANN&apos;)' ordinal='22' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;JAN&apos;)' ordinal='23' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;FEB&apos;)' ordinal='24' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;MAR&apos;)' ordinal='25' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;APR&apos;)' ordinal='26' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;MAY&apos;)' ordinal='27' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;JUN&apos;)' ordinal='28' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;JUL&apos;)' ordinal='29' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;AUG&apos;)' ordinal='30' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;SEP&apos;)' ordinal='31' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;OCT&apos;)' ordinal='32' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;NOV&apos;)' ordinal='33' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;DEC&apos;)' ordinal='34' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)' ordinal='35' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;JAN&apos;)' ordinal='36' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;FEB&apos;)' ordinal='37' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;MAR&apos;)' ordinal='38' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;APR&apos;)' ordinal='39' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;MAY&apos;)' ordinal='40' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;JUN&apos;)' ordinal='41' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;JUL&apos;)' ordinal='42' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;AUG&apos;)' ordinal='43' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;SEP&apos;)' ordinal='44' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;OCT&apos;)' ordinal='45' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;NOV&apos;)' ordinal='46' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;DEC&apos;)' ordinal='47' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;ANN&apos;)' ordinal='48' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;JAN&apos;)' ordinal='49' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;FEB&apos;)' ordinal='50' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;MAR&apos;)' ordinal='51' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;APR&apos;)' ordinal='52' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;MAY&apos;)' ordinal='53' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;JUN&apos;)' ordinal='54' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;JUL&apos;)' ordinal='55' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;AUG&apos;)' ordinal='56' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;SEP&apos;)' ordinal='57' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;OCT&apos;)' ordinal='58' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;NOV&apos;)' ordinal='59' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;DEC&apos;)' ordinal='60' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;ANN&apos;)' ordinal='61' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Climate Code&apos;)' ordinal='62' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Color Code&apos;)' ordinal='63' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Climate Names&apos;)' ordinal='64' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Group&apos;)' ordinal='65' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Precipitation Type&apos;)' ordinal='66' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Level of Heat&apos;)' ordinal='67' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.11jprsg1on3csi13gpz9d1xda9nv' name='US Cities Koppen Climate and Classification.csv' table='[US Cities Koppen Climate and Classification#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='(&apos;info&apos;, &apos;code&apos;)' ordinal='1' />
            <column datatype='string' name='(&apos;info&apos;, &apos;station&apos;)' ordinal='2' />
            <column datatype='string' name='(&apos;info&apos;, &apos;state&apos;)' ordinal='3' />
            <column datatype='real' name='(&apos;info&apos;, &apos;latitude (degr)&apos;)' ordinal='4' />
            <column datatype='real' name='(&apos;info&apos;, &apos;longitude (degr)&apos;)' ordinal='5' />
            <column datatype='real' name='(&apos;info&apos;, &apos;elevation (ft)&apos;)' ordinal='6' />
            <column datatype='real' name='(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)' ordinal='7' />
            <column datatype='string' name='(&apos;info&apos;, &apos;Koppen climate&apos;)' ordinal='8' />
            <column datatype='integer' name='(&apos;info&apos;, &apos;YRS&apos;)' ordinal='9' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;JAN&apos;)' ordinal='10' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;FEB&apos;)' ordinal='11' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;MAR&apos;)' ordinal='12' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;APR&apos;)' ordinal='13' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;MAY&apos;)' ordinal='14' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;JUN&apos;)' ordinal='15' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;JUL&apos;)' ordinal='16' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;AUG&apos;)' ordinal='17' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;SEP&apos;)' ordinal='18' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;OCT&apos;)' ordinal='19' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;NOV&apos;)' ordinal='20' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;DEC&apos;)' ordinal='21' />
            <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;ANN&apos;)' ordinal='22' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;JAN&apos;)' ordinal='23' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;FEB&apos;)' ordinal='24' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;MAR&apos;)' ordinal='25' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;APR&apos;)' ordinal='26' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;MAY&apos;)' ordinal='27' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;JUN&apos;)' ordinal='28' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;JUL&apos;)' ordinal='29' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;AUG&apos;)' ordinal='30' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;SEP&apos;)' ordinal='31' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;OCT&apos;)' ordinal='32' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;NOV&apos;)' ordinal='33' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;DEC&apos;)' ordinal='34' />
            <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)' ordinal='35' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;JAN&apos;)' ordinal='36' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;FEB&apos;)' ordinal='37' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;MAR&apos;)' ordinal='38' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;APR&apos;)' ordinal='39' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;MAY&apos;)' ordinal='40' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;JUN&apos;)' ordinal='41' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;JUL&apos;)' ordinal='42' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;AUG&apos;)' ordinal='43' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;SEP&apos;)' ordinal='44' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;OCT&apos;)' ordinal='45' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;NOV&apos;)' ordinal='46' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;DEC&apos;)' ordinal='47' />
            <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;ANN&apos;)' ordinal='48' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;JAN&apos;)' ordinal='49' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;FEB&apos;)' ordinal='50' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;MAR&apos;)' ordinal='51' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;APR&apos;)' ordinal='52' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;MAY&apos;)' ordinal='53' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;JUN&apos;)' ordinal='54' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;JUL&apos;)' ordinal='55' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;AUG&apos;)' ordinal='56' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;SEP&apos;)' ordinal='57' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;OCT&apos;)' ordinal='58' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;NOV&apos;)' ordinal='59' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;DEC&apos;)' ordinal='60' />
            <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;ANN&apos;)' ordinal='61' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Climate Code&apos;)' ordinal='62' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Color Code&apos;)' ordinal='63' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Climate Names&apos;)' ordinal='64' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Group&apos;)' ordinal='65' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Precipitation Type&apos;)' ordinal='66' />
            <column datatype='string' name='(&apos;Climate&apos;, &apos;Level of Heat&apos;)' ordinal='67' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;info&apos;, &apos;code&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;info&apos;, &apos;code&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;info&apos;, &apos;code&apos;)</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;info&apos;, &apos;station&apos;)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[(&apos;info&apos;, &apos;station&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;info&apos;, &apos;station&apos;)</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;info&apos;, &apos;state&apos;)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[(&apos;info&apos;, &apos;state&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;info&apos;, &apos;state&apos;)</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;info&apos;, &apos;latitude (degr)&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;info&apos;, &apos;latitude (degr)&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;info&apos;, &apos;latitude (degr)&apos;)</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;info&apos;, &apos;longitude (degr)&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;info&apos;, &apos;longitude (degr)&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;info&apos;, &apos;longitude (degr)&apos;)</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;info&apos;, &apos;elevation (ft)&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;info&apos;, &apos;elevation (ft)&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;info&apos;, &apos;elevation (ft)&apos;)</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;info&apos;, &apos;Koppen climate&apos;)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[(&apos;info&apos;, &apos;Koppen climate&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;info&apos;, &apos;Koppen climate&apos;)</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;info&apos;, &apos;YRS&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;info&apos;, &apos;YRS&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;info&apos;, &apos;YRS&apos;)</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;JAN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;JAN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;JAN&apos;)</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;FEB&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;FEB&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;FEB&apos;)</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;MAR&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;MAR&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;MAR&apos;)</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;APR&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;APR&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;APR&apos;)</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;MAY&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;MAY&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;MAY&apos;)</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;JUN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;JUN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;JUN&apos;)</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;JUL&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;JUL&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;JUL&apos;)</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;AUG&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;AUG&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;AUG&apos;)</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;SEP&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;SEP&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;SEP&apos;)</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;OCT&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;OCT&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;OCT&apos;)</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;NOV&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;NOV&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;NOV&apos;)</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;DEC&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;DEC&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;DEC&apos;)</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;max_temp (F)&apos;, &apos;ANN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;max_temp (F)&apos;, &apos;ANN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;max_temp (F)&apos;, &apos;ANN&apos;)</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;JAN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;JAN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;JAN&apos;)</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;FEB&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;FEB&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;FEB&apos;)</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;MAR&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;MAR&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;MAR&apos;)</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;APR&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;APR&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;APR&apos;)</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;MAY&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;MAY&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;MAY&apos;)</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;JUN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;JUN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;JUN&apos;)</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;JUL&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;JUL&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;JUL&apos;)</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;AUG&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;AUG&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;AUG&apos;)</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;SEP&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;SEP&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;SEP&apos;)</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;OCT&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;OCT&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;OCT&apos;)</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;NOV&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;NOV&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;NOV&apos;)</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;DEC&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;DEC&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;DEC&apos;)</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;JAN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;JAN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;JAN&apos;)</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;FEB&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;FEB&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;FEB&apos;)</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;MAR&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;MAR&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;MAR&apos;)</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;APR&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;APR&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;APR&apos;)</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;MAY&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;MAY&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;MAY&apos;)</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;JUN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;JUN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;JUN&apos;)</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;JUL&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;JUL&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;JUL&apos;)</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;AUG&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;AUG&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;AUG&apos;)</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;SEP&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;SEP&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;SEP&apos;)</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;OCT&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;OCT&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;OCT&apos;)</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;NOV&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;NOV&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;NOV&apos;)</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;DEC&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;DEC&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;DEC&apos;)</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;min_temp (F)&apos;, &apos;ANN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;min_temp (F)&apos;, &apos;ANN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;min_temp (F)&apos;, &apos;ANN&apos;)</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;JAN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;JAN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;JAN&apos;)</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;FEB&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;FEB&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;FEB&apos;)</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;MAR&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;MAR&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;MAR&apos;)</remote-alias>
            <ordinal>51</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;APR&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;APR&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;APR&apos;)</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;MAY&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;MAY&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;MAY&apos;)</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;JUN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;JUN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;JUN&apos;)</remote-alias>
            <ordinal>54</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;JUL&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;JUL&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;JUL&apos;)</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;AUG&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;AUG&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;AUG&apos;)</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;SEP&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;SEP&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;SEP&apos;)</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;OCT&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;OCT&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;OCT&apos;)</remote-alias>
            <ordinal>58</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;NOV&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;NOV&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;NOV&apos;)</remote-alias>
            <ordinal>59</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;DEC&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;DEC&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;DEC&apos;)</remote-alias>
            <ordinal>60</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;precip (inch)&apos;, &apos;ANN&apos;)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[(&apos;precip (inch)&apos;, &apos;ANN&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;precip (inch)&apos;, &apos;ANN&apos;)</remote-alias>
            <ordinal>61</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;Climate&apos;, &apos;Climate Code&apos;)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[(&apos;Climate&apos;, &apos;Climate Code&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;Climate&apos;, &apos;Climate Code&apos;)</remote-alias>
            <ordinal>62</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;Climate&apos;, &apos;Color Code&apos;)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[(&apos;Climate&apos;, &apos;Color Code&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;Climate&apos;, &apos;Color Code&apos;)</remote-alias>
            <ordinal>63</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;Climate&apos;, &apos;Climate Names&apos;)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[(&apos;Climate&apos;, &apos;Climate Names&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;Climate&apos;, &apos;Climate Names&apos;)</remote-alias>
            <ordinal>64</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;Climate&apos;, &apos;Group&apos;)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[(&apos;Climate&apos;, &apos;Group&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;Climate&apos;, &apos;Group&apos;)</remote-alias>
            <ordinal>65</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;Climate&apos;, &apos;Precipitation Type&apos;)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[(&apos;Climate&apos;, &apos;Precipitation Type&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;Climate&apos;, &apos;Precipitation Type&apos;)</remote-alias>
            <ordinal>66</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;Climate&apos;, &apos;Level of Heat&apos;)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[(&apos;Climate&apos;, &apos;Level of Heat&apos;)]</local-name>
            <parent-name>[US Cities Koppen Climate and Classification.csv]</parent-name>
            <remote-alias>(&apos;Climate&apos;, &apos;Level of Heat&apos;)</remote-alias>
            <ordinal>67</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' role='dimension' type='nominal' />
      <column caption='(&apos;Info&apos;, &apos;Code&apos;)' datatype='integer' name='[(&apos;info&apos;, &apos;code&apos;)]' role='dimension' type='ordinal' />
      <column caption='(&apos;Info&apos;, &apos;Dist To Sea (Mi)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;Info&apos;, &apos;Elevation (Ft)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;elevation (ft)&apos;)]' role='measure' type='quantitative' />
      <column aggregation='Avg' caption='(&apos;Info&apos;, &apos;Latitude (Degr)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;latitude (degr)&apos;)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' caption='(&apos;Info&apos;, &apos;Longitude (Degr)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;longitude (degr)&apos;)]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='(&apos;Info&apos;, &apos;State&apos;)' datatype='string' name='[(&apos;info&apos;, &apos;state&apos;)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='(&apos;Info&apos;, &apos;Station&apos;)' datatype='string' name='[(&apos;info&apos;, &apos;station&apos;)]' role='dimension' type='nominal' />
      <column caption='(&apos;max temp (F)&apos;, &apos;ANN&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;ANN&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;APR&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;APR&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;AUG&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;AUG&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;DEC&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;DEC&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;FEB&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;FEB&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;JAN&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;JAN&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;JUL&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;JUL&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;JUN&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;JUN&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;MAR&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;MAR&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;MAY&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;MAY&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;NOV&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;NOV&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;OCT&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;OCT&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;max temp (F)&apos;, &apos;SEP&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;SEP&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;ANN&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;APR&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;APR&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;AUG&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;AUG&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;DEC&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;DEC&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;FEB&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;FEB&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;JAN&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;JAN&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;JUL&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;JUL&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;JUN&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;JUN&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;MAR&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;MAR&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;MAY&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;MAY&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;NOV&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;NOV&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;OCT&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;OCT&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;mean temp (F)&apos;, &apos;SEP&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;SEP&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;ANN&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;ANN&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;APR&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;APR&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;AUG&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;AUG&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;DEC&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;DEC&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;FEB&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;FEB&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;JAN&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;JAN&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;JUL&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;JUL&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;JUN&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;JUN&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;MAR&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;MAR&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;MAY&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;MAY&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;NOV&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;NOV&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;OCT&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;OCT&apos;)]' role='measure' type='quantitative' />
      <column caption='(&apos;min temp (F)&apos;, &apos;SEP&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;SEP&apos;)]' role='measure' type='quantitative' />
      <column caption='Mean_Ann_Temp_Range' datatype='real' name='[Calculation_798825999193370625]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([(&apos;max_temp (F)&apos;, &apos;APR&apos;)]-[(&apos;min_temp (F)&apos;, &apos;APR&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;AUG&apos;)]-[(&apos;min_temp (F)&apos;, &apos;AUG&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;DEC&apos;)]-[(&apos;min_temp (F)&apos;, &apos;DEC&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;FEB&apos;)]-[(&apos;min_temp (F)&apos;, &apos;FEB&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;JAN&apos;)]-[(&apos;min_temp (F)&apos;, &apos;JAN&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;JUL&apos;)]-[(&apos;min_temp (F)&apos;, &apos;JUL&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;JUN&apos;)]-[(&apos;min_temp (F)&apos;, &apos;JUN&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;MAR&apos;)]-[(&apos;min_temp (F)&apos;, &apos;MAR&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;MAY&apos;)]-[(&apos;min_temp (F)&apos;, &apos;MAY&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;NOV&apos;)]-[(&apos;min_temp (F)&apos;, &apos;NOV&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;OCT&apos;)]-[(&apos;min_temp (F)&apos;, &apos;OCT&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;SEP&apos;)]-[(&apos;min_temp (F)&apos;, &apos;SEP&apos;)])/12' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='US Cities Koppen Climate and Classification.csv' datatype='table' name='[__tableau_internal_object_id__].[US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5]' role='measure' type='quantitative' />
      <column-instance column='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' derivation='None' name='[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' type='palette'>
            <map to='#003200'>
              <bucket>&quot;Subpolar oceanic climate&quot;</bucket>
            </map>
            <map to='#005000'>
              <bucket>&quot;Temperate oceanic climate&quot;</bucket>
            </map>
            <map to='#007800'>
              <bucket>&quot;Humid subtropical climate&quot;</bucket>
            </map>
            <map to='#00d700'>
              <bucket>&quot;Warm-summer Mediterranean climate&quot;</bucket>
            </map>
            <map to='#550055'>
              <bucket>&quot;Hot-summer humid continental climate&quot;</bucket>
            </map>
            <map to='#64ffff'>
              <bucket>&quot;Tundra&quot;</bucket>
            </map>
            <map to='#820082'>
              <bucket>&quot;Warm-summer humid continental climate&quot;</bucket>
            </map>
            <map to='#8c8c8c'>
              <bucket>&quot;Warm, dry-summer continental climate&quot;</bucket>
            </map>
            <map to='#960000'>
              <bucket>&quot;Tropical rainforest climate&quot;</bucket>
            </map>
            <map to='#96ff00'>
              <bucket>&quot;Hot-summer Mediterranean climate&quot;</bucket>
            </map>
            <map to='#bebe00'>
              <bucket>&quot;Monsoon-influenced humid subtropical climate&quot;</bucket>
            </map>
            <map to='#bebebe'>
              <bucket>&quot;Dry-summer subarctic climate&quot;</bucket>
            </map>
            <map to='#c800c8'>
              <bucket>&quot;Subarctic climate&quot;</bucket>
            </map>
            <map to='#cc8d14'>
              <bucket>&quot;Hot semi-arid (steppe) climate&quot;</bucket>
            </map>
            <map to='#ccaa54'>
              <bucket>&quot;Cold semi-arid (steppe) climate&quot;</bucket>
            </map>
            <map to='#ff6e6e'>
              <bucket>&quot;Tropical dry savanna climate&quot;</bucket>
            </map>
            <map to='#ffcc00'>
              <bucket>&quot;Hot deserts climate&quot;</bucket>
            </map>
            <map to='#ffcccc'>
              <bucket>&quot;Tropical savanna, wet&quot;</bucket>
            </map>
            <map to='#ffff64'>
              <bucket>&quot;Cold desert climate&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='US Cities Koppen Climate and Classification.csv' id='US Cities Koppen Climate and Classification.csv_5E51165CBE9C433FA3F836C1ACF038E5'>
            <properties context=''>
              <relation connection='textscan.11jprsg1on3csi13gpz9d1xda9nv' name='US Cities Koppen Climate and Classification.csv' table='[US Cities Koppen Climate and Classification#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='integer' name='(&apos;info&apos;, &apos;code&apos;)' ordinal='1' />
                  <column datatype='string' name='(&apos;info&apos;, &apos;station&apos;)' ordinal='2' />
                  <column datatype='string' name='(&apos;info&apos;, &apos;state&apos;)' ordinal='3' />
                  <column datatype='real' name='(&apos;info&apos;, &apos;latitude (degr)&apos;)' ordinal='4' />
                  <column datatype='real' name='(&apos;info&apos;, &apos;longitude (degr)&apos;)' ordinal='5' />
                  <column datatype='real' name='(&apos;info&apos;, &apos;elevation (ft)&apos;)' ordinal='6' />
                  <column datatype='real' name='(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)' ordinal='7' />
                  <column datatype='string' name='(&apos;info&apos;, &apos;Koppen climate&apos;)' ordinal='8' />
                  <column datatype='integer' name='(&apos;info&apos;, &apos;YRS&apos;)' ordinal='9' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;JAN&apos;)' ordinal='10' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;FEB&apos;)' ordinal='11' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;MAR&apos;)' ordinal='12' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;APR&apos;)' ordinal='13' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;MAY&apos;)' ordinal='14' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;JUN&apos;)' ordinal='15' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;JUL&apos;)' ordinal='16' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;AUG&apos;)' ordinal='17' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;SEP&apos;)' ordinal='18' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;OCT&apos;)' ordinal='19' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;NOV&apos;)' ordinal='20' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;DEC&apos;)' ordinal='21' />
                  <column datatype='real' name='(&apos;max_temp (F)&apos;, &apos;ANN&apos;)' ordinal='22' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;JAN&apos;)' ordinal='23' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;FEB&apos;)' ordinal='24' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;MAR&apos;)' ordinal='25' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;APR&apos;)' ordinal='26' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;MAY&apos;)' ordinal='27' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;JUN&apos;)' ordinal='28' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;JUL&apos;)' ordinal='29' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;AUG&apos;)' ordinal='30' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;SEP&apos;)' ordinal='31' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;OCT&apos;)' ordinal='32' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;NOV&apos;)' ordinal='33' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;DEC&apos;)' ordinal='34' />
                  <column datatype='real' name='(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)' ordinal='35' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;JAN&apos;)' ordinal='36' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;FEB&apos;)' ordinal='37' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;MAR&apos;)' ordinal='38' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;APR&apos;)' ordinal='39' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;MAY&apos;)' ordinal='40' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;JUN&apos;)' ordinal='41' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;JUL&apos;)' ordinal='42' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;AUG&apos;)' ordinal='43' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;SEP&apos;)' ordinal='44' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;OCT&apos;)' ordinal='45' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;NOV&apos;)' ordinal='46' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;DEC&apos;)' ordinal='47' />
                  <column datatype='real' name='(&apos;min_temp (F)&apos;, &apos;ANN&apos;)' ordinal='48' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;JAN&apos;)' ordinal='49' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;FEB&apos;)' ordinal='50' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;MAR&apos;)' ordinal='51' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;APR&apos;)' ordinal='52' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;MAY&apos;)' ordinal='53' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;JUN&apos;)' ordinal='54' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;JUL&apos;)' ordinal='55' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;AUG&apos;)' ordinal='56' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;SEP&apos;)' ordinal='57' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;OCT&apos;)' ordinal='58' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;NOV&apos;)' ordinal='59' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;DEC&apos;)' ordinal='60' />
                  <column datatype='real' name='(&apos;precip (inch)&apos;, &apos;ANN&apos;)' ordinal='61' />
                  <column datatype='string' name='(&apos;Climate&apos;, &apos;Climate Code&apos;)' ordinal='62' />
                  <column datatype='string' name='(&apos;Climate&apos;, &apos;Color Code&apos;)' ordinal='63' />
                  <column datatype='string' name='(&apos;Climate&apos;, &apos;Climate Names&apos;)' ordinal='64' />
                  <column datatype='string' name='(&apos;Climate&apos;, &apos;Group&apos;)' ordinal='65' />
                  <column datatype='string' name='(&apos;Climate&apos;, &apos;Precipitation Type&apos;)' ordinal='66' />
                  <column datatype='string' name='(&apos;Climate&apos;, &apos;Level of Heat&apos;)' ordinal='67' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='US Cities Koppen Climate and Classification' name='federated.05ykz9c12oxj0p1dbo5t61dsayjt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.05ykz9c12oxj0p1dbo5t61dsayjt'>
            <column datatype='string' name='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' role='dimension' type='nominal' />
            <column aggregation='Avg' caption='(&apos;Info&apos;, &apos;Latitude (Degr)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;latitude (degr)&apos;)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' caption='(&apos;Info&apos;, &apos;Longitude (Degr)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;longitude (degr)&apos;)]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column caption='(&apos;Info&apos;, &apos;Station&apos;)' datatype='string' name='[(&apos;info&apos;, &apos;station&apos;)]' role='dimension' type='nominal' />
            <column-instance column='[(&apos;info&apos;, &apos;latitude (degr)&apos;)]' derivation='Avg' name='[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;info&apos;, &apos;longitude (degr)&apos;)]' derivation='Avg' name='[avg:(&apos;info&apos;, &apos;longitude (degr)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' derivation='None' name='[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;info&apos;, &apos;station&apos;)]' derivation='None' name='[none:(&apos;info&apos;, &apos;station&apos;):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;longitude (degr)&apos;):qk]' field-type='quantitative' max='34394784.419504896' min='24295340.806577262' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]' field-type='quantitative' max='8358301.5118235247' min='2451234.8466695249' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' value='Climate'>
              <formatted-text>
                <run>Climate</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Climate:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('Climate', 'Climate Names'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Station:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('info', 'station'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Latitude (Degree):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:('info', 'latitude (degr)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Longitude (Degree):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:('info', 'longitude (degr)'):qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]</rows>
        <cols>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;longitude (degr)&apos;):qk]</cols>
      </table>
      <simple-id uuid='{BEB256A3-B3EC-4CD7-B717-A2B773C1E454}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='US Cities Koppen Climate and Classification' name='federated.05ykz9c12oxj0p1dbo5t61dsayjt' />
          </datasources>
          <datasource-dependencies datasource='federated.05ykz9c12oxj0p1dbo5t61dsayjt'>
            <column datatype='string' name='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' role='dimension' type='nominal' />
            <column caption='(&apos;Info&apos;, &apos;Dist To Sea (Mi)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;Info&apos;, &apos;Elevation (Ft)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;elevation (ft)&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;Info&apos;, &apos;Station&apos;)' datatype='string' name='[(&apos;info&apos;, &apos;station&apos;)]' role='dimension' type='nominal' />
            <column caption='(&apos;max temp (F)&apos;, &apos;APR&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;APR&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;AUG&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;AUG&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;DEC&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;DEC&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;FEB&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;FEB&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;JAN&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;JAN&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;JUL&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;JUL&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;JUN&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;JUN&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;MAR&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;MAR&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;MAY&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;MAY&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;NOV&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;NOV&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;OCT&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;OCT&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;max temp (F)&apos;, &apos;SEP&apos;)' datatype='real' name='[(&apos;max_temp (F)&apos;, &apos;SEP&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;APR&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;APR&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;AUG&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;AUG&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;DEC&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;DEC&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;FEB&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;FEB&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;JAN&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;JAN&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;JUL&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;JUL&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;JUN&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;JUN&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;MAR&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;MAR&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;MAY&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;MAY&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;NOV&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;NOV&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;OCT&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;OCT&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;min temp (F)&apos;, &apos;SEP&apos;)' datatype='real' name='[(&apos;min_temp (F)&apos;, &apos;SEP&apos;)]' role='measure' type='quantitative' />
            <column caption='Mean_Ann_Temp_Range' datatype='real' name='[Calculation_798825999193370625]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([(&apos;max_temp (F)&apos;, &apos;APR&apos;)]-[(&apos;min_temp (F)&apos;, &apos;APR&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;AUG&apos;)]-[(&apos;min_temp (F)&apos;, &apos;AUG&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;DEC&apos;)]-[(&apos;min_temp (F)&apos;, &apos;DEC&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;FEB&apos;)]-[(&apos;min_temp (F)&apos;, &apos;FEB&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;JAN&apos;)]-[(&apos;min_temp (F)&apos;, &apos;JAN&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;JUL&apos;)]-[(&apos;min_temp (F)&apos;, &apos;JUL&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;JUN&apos;)]-[(&apos;min_temp (F)&apos;, &apos;JUN&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;MAR&apos;)]-[(&apos;min_temp (F)&apos;, &apos;MAR&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;MAY&apos;)]-[(&apos;min_temp (F)&apos;, &apos;MAY&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;NOV&apos;)]-[(&apos;min_temp (F)&apos;, &apos;NOV&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;OCT&apos;)]-[(&apos;min_temp (F)&apos;, &apos;OCT&apos;)])/12+&#13;&#10;([(&apos;max_temp (F)&apos;, &apos;SEP&apos;)]-[(&apos;min_temp (F)&apos;, &apos;SEP&apos;)])/12' />
            </column>
            <column-instance column='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' derivation='None' name='[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;info&apos;, &apos;station&apos;)]' derivation='None' name='[none:(&apos;info&apos;, &apos;station&apos;):nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)]' derivation='Sum' name='[sum:(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;info&apos;, &apos;elevation (ft)&apos;)]' derivation='Sum' name='[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_798825999193370625]' derivation='Sum' name='[sum:Calculation_798825999193370625:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' field-type='quantitative' scale='log' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;):qk]' field-type='quantitative' scale='log' scope='cols' type='space' />
            <format attr='title' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' scope='cols' value='Elevation (Ft)' />
            <format attr='title' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;):qk]' scope='cols' value='Dist To Sea (Mi)' />
            <format attr='title' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:Calculation_798825999193370625:qk]' scope='rows' value='Mean of Monthly Temperature Range (F)' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' value='false' />
            <format attr='break-on-special' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' value='false' />
            <format attr='omit-on-special' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:Calculation_798825999193370625:qk]' value='false' />
            <format attr='break-on-special' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:Calculation_798825999193370625:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:Calculation_798825999193370625:qk]' value='false' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' value='Climate'>
              <formatted-text>
                <run>Climate</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='exp'>
              <excluded-factors>
                <column>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</column>
              </excluded-factors>
            </trendline>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Climate:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('Climate', 'Climate Names'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Station:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('info', 'station'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Dist To Sea (Mi):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:('info', 'dist_to_sea (mi)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Elevation (Ft):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:('info', 'elevation (ft)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Mean of Monthly Temperature Range (F):	</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:Calculation_798825999193370625:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <trendline enable-confidence-bands='true' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='log'>
              <excluded-factors>
                <column>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</column>
              </excluded-factors>
            </trendline>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Climate:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('Climate', 'Climate Names'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Station:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('info', 'station'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Dist To Sea (Mi):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:('info', 'dist_to_sea (mi)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Elevation (Ft):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:('info', 'elevation (ft)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Mean of Monthly Temperature Range (F):	</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:Calculation_798825999193370625:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <trendline enable-confidence-bands='true' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='log'>
              <excluded-factors>
                <column>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</column>
              </excluded-factors>
            </trendline>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Climate:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('Climate', 'Climate Names'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Station:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('info', 'station'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Dist To Sea (Mi):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:('info', 'dist_to_sea (mi)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Elevation (Ft):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:('info', 'elevation (ft)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Mean of Monthly Temperature Range (F):	</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:Calculation_798825999193370625:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:Calculation_798825999193370625:qk]</rows>
        <cols>([federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk] + [federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;):qk])</cols>
      </table>
      <simple-id uuid='{79573C59-2164-4C9A-B0FA-3A889C13570A}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='US Cities Koppen Climate and Classification' name='federated.05ykz9c12oxj0p1dbo5t61dsayjt' />
          </datasources>
          <datasource-dependencies datasource='federated.05ykz9c12oxj0p1dbo5t61dsayjt'>
            <column datatype='string' name='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' role='dimension' type='nominal' />
            <column caption='(&apos;Info&apos;, &apos;Elevation (Ft)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;elevation (ft)&apos;)]' role='measure' type='quantitative' />
            <column aggregation='Avg' caption='(&apos;Info&apos;, &apos;Latitude (Degr)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;latitude (degr)&apos;)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column caption='(&apos;Info&apos;, &apos;Station&apos;)' datatype='string' name='[(&apos;info&apos;, &apos;station&apos;)]' role='dimension' type='nominal' />
            <column caption='(&apos;mean temp (F)&apos;, &apos;ANN&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)]' role='measure' type='quantitative' />
            <column-instance column='[(&apos;info&apos;, &apos;latitude (degr)&apos;)]' derivation='Avg' name='[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' derivation='None' name='[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;info&apos;, &apos;station&apos;)]' derivation='None' name='[none:(&apos;info&apos;, &apos;station&apos;):nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;info&apos;, &apos;elevation (ft)&apos;)]' derivation='Sum' name='[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)]' derivation='Sum' name='[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' scope='rows' value='Mean Annual Temperature (F)' />
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' field-type='quantitative' scale='log' scope='cols' type='space' />
            <format attr='title' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' scope='cols' value='Elevation (Ft)' />
            <format attr='title' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]' scope='cols' value='Latitude (Degree)' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' value='false' />
            <format attr='break-on-special' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' value='false' />
            <format attr='omit-on-special' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' value='false' />
            <format attr='break-on-special' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]' value='false' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' value='Climate'>
              <formatted-text>
                <run>Climate</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <trendline enable-confidence-bands='true' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear'>
              <excluded-factors>
                <column>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</column>
              </excluded-factors>
            </trendline>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <trendline enable-confidence-bands='true' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear'>
              <excluded-factors>
                <column>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</column>
              </excluded-factors>
            </trendline>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <trendline enable-confidence-bands='true' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='log'>
              <excluded-factors>
                <column>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</column>
              </excluded-factors>
            </trendline>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]</rows>
        <cols>([federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk] + [federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;elevation (ft)&apos;):qk])</cols>
      </table>
      <simple-id uuid='{EEF48E88-36E2-4A0D-A0EE-4DF4C5D4F544}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='US Cities Koppen Climate and Classification' name='federated.05ykz9c12oxj0p1dbo5t61dsayjt' />
          </datasources>
          <datasource-dependencies datasource='federated.05ykz9c12oxj0p1dbo5t61dsayjt'>
            <column datatype='string' name='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' role='dimension' type='nominal' />
            <column caption='(&apos;Info&apos;, &apos;Dist To Sea (Mi)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)]' role='measure' type='quantitative' />
            <column caption='(&apos;Info&apos;, &apos;Station&apos;)' datatype='string' name='[(&apos;info&apos;, &apos;station&apos;)]' role='dimension' type='nominal' />
            <column datatype='real' name='[(&apos;precip (inch)&apos;, &apos;ANN&apos;)]' role='measure' type='quantitative' />
            <column-instance column='[(&apos;Climate&apos;, &apos;Climate Names&apos;)]' derivation='None' name='[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;info&apos;, &apos;station&apos;)]' derivation='None' name='[none:(&apos;info&apos;, &apos;station&apos;):nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;)]' derivation='Sum' name='[sum:(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;precip (inch)&apos;, &apos;ANN&apos;)]' derivation='Sum' name='[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]' included-values='non-null' />
          <slices>
            <column>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;):qk]' field-type='quantitative' scale='log' scope='cols' type='space' />
            <format attr='title' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;):qk]' scope='cols' value='Dist To Sea (Mi)' />
            <format attr='title' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]' scope='rows' value='precipitation (inch)' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' value='Climate'>
              <formatted-text>
                <run>Climate</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <trendline enable-confidence-bands='true' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='log'>
              <excluded-factors>
                <column>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</column>
              </excluded-factors>
            </trendline>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]</rows>
        <cols>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;info&apos;, &apos;dist_to_sea (mi)&apos;):qk]</cols>
      </table>
      <simple-id uuid='{15EB9E6B-1A2C-4B99-B359-56835099BCA9}' />
    </worksheet>
    <worksheet name='Sheet 5'>
      <table>
        <view>
          <datasources>
            <datasource caption='US Cities Koppen Climate and Classification' name='federated.05ykz9c12oxj0p1dbo5t61dsayjt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.05ykz9c12oxj0p1dbo5t61dsayjt'>
            <column aggregation='Avg' caption='(&apos;Info&apos;, &apos;Latitude (Degr)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;latitude (degr)&apos;)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' caption='(&apos;Info&apos;, &apos;Longitude (Degr)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;longitude (degr)&apos;)]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column caption='(&apos;Info&apos;, &apos;Station&apos;)' datatype='string' name='[(&apos;info&apos;, &apos;station&apos;)]' role='dimension' type='nominal' />
            <column caption='(&apos;mean temp (F)&apos;, &apos;ANN&apos;)' datatype='real' name='[(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)]' role='measure' type='quantitative' />
            <column-instance column='[(&apos;info&apos;, &apos;latitude (degr)&apos;)]' derivation='Avg' name='[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;info&apos;, &apos;longitude (degr)&apos;)]' derivation='Avg' name='[avg:(&apos;info&apos;, &apos;longitude (degr)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;info&apos;, &apos;station&apos;)]' derivation='None' name='[none:(&apos;info&apos;, &apos;station&apos;):nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;mean_temp (F)&apos;, &apos;ANN&apos;)]' derivation='Sum' name='[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:(&apos;info&apos;, &apos;station&apos;):nk]' member='&quot;Columbia&quot;' />
                <groupfilter function='member' level='[none:(&apos;info&apos;, &apos;station&apos;):nk]' member='&quot;Columbus&quot;' />
                <groupfilter function='member' level='[none:(&apos;info&apos;, &apos;station&apos;):nk]' member='&quot;Jackson&quot;' />
                <groupfilter function='member' level='[none:(&apos;info&apos;, &apos;station&apos;):nk]' member='&quot;Norfolk&quot;' />
                <groupfilter function='member' level='[none:(&apos;info&apos;, &apos;station&apos;):nk]' member='&quot;Portland&quot;' />
                <groupfilter function='member' level='[none:(&apos;info&apos;, &apos;station&apos;):nk]' member='&quot;Rochester&quot;' />
                <groupfilter function='member' level='[none:(&apos;info&apos;, &apos;station&apos;):nk]' member='&quot;Springfield&quot;' />
                <groupfilter function='member' level='[none:(&apos;info&apos;, &apos;station&apos;):nk]' member='&quot;Wilmington&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;longitude (degr)&apos;):qk]' field-type='quantitative' max='-5911845.8621416651' min='-13550487.94423553' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]' field-type='quantitative' max='6866871.9283361137' min='2580182.8302141526' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' num-steps='15' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#212d99</color>
                <color>#7077b9</color>
                <color>#d9d9d9</color>
                <color>#ec7676</color>
                <color>#ff0000</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' value='mean temperature (F)'>
              <formatted-text>
                <run>mean temperature (F)</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Station:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('info', 'station'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Latitude (Degree):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:('info', 'latitude (degr)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Longitude (Degree):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:('info', 'longitude (degr)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>mean temperature (F):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:('mean_temp (F)', 'ANN'):qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]</rows>
        <cols>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;longitude (degr)&apos;):qk]</cols>
      </table>
      <simple-id uuid='{685D3285-2F7D-484C-B7AE-6B1909447896}' />
    </worksheet>
    <worksheet name='Sheet 6'>
      <table>
        <view>
          <datasources>
            <datasource caption='US Cities Koppen Climate and Classification' name='federated.05ykz9c12oxj0p1dbo5t61dsayjt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.05ykz9c12oxj0p1dbo5t61dsayjt'>
            <column aggregation='Avg' caption='(&apos;Info&apos;, &apos;Latitude (Degr)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;latitude (degr)&apos;)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' caption='(&apos;Info&apos;, &apos;Longitude (Degr)&apos;)' datatype='real' name='[(&apos;info&apos;, &apos;longitude (degr)&apos;)]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column caption='(&apos;Info&apos;, &apos;Station&apos;)' datatype='string' name='[(&apos;info&apos;, &apos;station&apos;)]' role='dimension' type='nominal' />
            <column datatype='real' name='[(&apos;precip (inch)&apos;, &apos;ANN&apos;)]' role='measure' type='quantitative' />
            <column-instance column='[(&apos;info&apos;, &apos;latitude (degr)&apos;)]' derivation='Avg' name='[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;info&apos;, &apos;longitude (degr)&apos;)]' derivation='Avg' name='[avg:(&apos;info&apos;, &apos;longitude (degr)&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;info&apos;, &apos;station&apos;)]' derivation='None' name='[none:(&apos;info&apos;, &apos;station&apos;):nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;precip (inch)&apos;, &apos;ANN&apos;)]' derivation='Sum' name='[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;longitude (degr)&apos;):qk]' field-type='quantitative' max='33496826.336681064' min='26250758.138124466' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]' field-type='quantitative' max='6606637.5244743852' min='2368482.4785531601' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]' max='70.0' num-steps='15' symmetric='false' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#ffaa00</color>
                <color>#ecc476</color>
                <color>#d9d9d9</color>
                <color>#60c1a9</color>
                <color>#00aa7f</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]' value='precipitation (inch)'>
              <formatted-text>
                <run>precipitation (inch)</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]' />
              <lod column='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Station:&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:('info', 'station'):nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Latitude (Degree):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:('info', 'latitude (degr)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Longitude (Degree):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:('info', 'longitude (degr)'):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>precipitation (inch):&#9;</run>
                <run bold='true'><![CDATA[<[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:('precip (inch)', 'ANN'):qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;latitude (degr)&apos;):qk]</rows>
        <cols>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[avg:(&apos;info&apos;, &apos;longitude (degr)&apos;):qk]</cols>
      </table>
      <simple-id uuid='{1F155EBC-2BEF-4885-AAD2-B7BDA9A76181}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</field>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{294D6769-8AB4-4C07-8F13-0FE4E0E803E9}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</field>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;state&apos;):nk]</field>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BC543F56-ADF5-4A9B-B5CE-F3C0AD892C14}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</field>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{76AE6A9C-96D3-490B-8D76-CCC0FB2562D5}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;Climate&apos;, &apos;Climate Names&apos;):nk]</field>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{23607B21-2A7F-4B97-BEBD-E6ADEC2C1FD0}' />
    </window>
    <window class='worksheet' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='118'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;mean_temp (F)&apos;, &apos;ANN&apos;):qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{07CEE702-A1DA-4725-A41E-4F8A88496C1F}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[sum:(&apos;precip (inch)&apos;, &apos;ANN&apos;):qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.05ykz9c12oxj0p1dbo5t61dsayjt].[none:(&apos;info&apos;, &apos;station&apos;):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{12BE50F9-5F7A-4CA1-9E14-3344EF7CD35A}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      mv8CJUpJmDC9O2QAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nO2deXxU1dn4v/fOPsnMJJPJNllI2CEsKriAiCKivm/dirjvey1qa1ttq1at
      bdXavl1sbatWxaWIe3/YuqCIKIggAmFJIAkkJGSZJDOTycxk1nvv74+YgZgA2RPN/X4+fMid
      ufc+z9xznnvOec7znCMoiqKgojJKEYdbARWV4WTADUCSpCG9rr8Ml1xZlpFledTIhZFZxiOm
      BRiunthw9gCHQ/Zo+71HkztiDEBFZThQDUBlVKMagMqoRjUAlVGNagAqoxrVAAYBOR4n0tIy
      rB4XlZ7RawNo9yEryJKELCsoioIkDY9feaSy5rrreKmggPKXXx5uVVSOQq8MINDSzCefbSQW
      amXzl1vZsm0H5aU72F68BW8gOlg6fuOo/fhjoj4frs8/H25VVI6CtjcnJ6c4yLA3IogaZFlC
      FATQGpg8wUmTP4DVZEOW5T41/SNxlrCvLFy+nLqPPmLSjTcSj8e7PUdRlMS/oUSWZQRBGJbZ
      4JFYxkJvguFa3C6+2LKdyZMm4Gr0gkZLqlnEFwgzfupMrCYtkiSh0Wh6rWQ8Hker7ZU9DgjD
      JbfjRdGXZ9UfJElCEAREceiHfyOxjHtlAD1BNYCeoRrAyJCreoFURjWqAaiMalQDUBnVqAag
      MqpRDUBlVKMagMqoRjUAlVGNagAqoxrVAFRGNaoBqIxqVANQGdWoBqAyqlENQGVU06vQvEBL
      M9t2V3Hy8TPYtasUiz0TOeTF6w8xYeoMLMahj/RTUekPvU6IsVsbCQU8eP0R4oIHk0HLlAn5
      NHlbMWeoCTE9RU2IGRlye9cC+Dy4XC4y0h2YjFqQZZRYhL2VNTgLpyZi2/sa4z4cseLDJXc0
      5gPAyCvjXiXExGNRorE4Wp0eQZFBFNGIAtGYhNGgB0ZfQsy/1v6LB1c8yI/P/zHfO/t7Pb5u
      NBrASCzjXj0FrU6P2WxGr9Oi0+vRabWIoiZR+UcjL659kYqGCp5f83yX79p2tlFzbw2hPaFh
      0EylJ6ij1n5y/8X3YzPbuGnRTV2+q7qtCv9aP8GtQSa/M3kYtFM5GqoB9JO5k+cyd/Lcbr+z
      nmalbWsb1tOsQ6yVSk9Rk+IHUa4iK0h+CY1FgyAKnb5TxwAjQ67aAgwigiigtamPeCSjzgSr
      jGpUA+gHcjyOf/9+lGHac0ul/6gG0A/W/eAHLJ80iS8efHC4VVHpI6oB9ANvSQlyJIK3tHS4
      VVHpI+oIrR8sePZZ9v/nP4xdsmS4VVHpI6obVF0bdMgYiWWsdoFURjWqAaiManplAG2tHjZt
      KQbA11RLceleaqsq2LatmFBMdQWqfPPoVYfMmJxCsrEBOR6h3hNEh0IwKjBprJNmtw9nulVN
      iOkhakLMyJDbKwOQpTiRSISg308sGqHW5SY/K42mZjcG+xg1IaYXjMZBMIy8Mu6VNuG2IHa7
      nbjGyPRp0xg/PoJWVPC0hshMMQ2IoioqQ4nqBlXdoEPGSCxj1Qs0ytnyyCOsKCqi+t13h1uV
      YUE1gFFOyVNP4S0poXzFiuFWZVhQDWCUM+exxxh30UXMvPPO4VZlWFDHAOoYYMgYiWWstgAq
      oxrVAFRGNaoBdIPr8895b/FiKv/f/xtuVVQGGTUfoBu2PvYYlW+9ha+igsLzzx9udVQGEdUA
      umHS1VfTUlbG1FtuGW5VVAYZ1QukeoGGjJFYxuoYYICofOstVl1yCU1btgy3Kiq9YEjNUYpG
      iXg8mDIzEQTh6Bd8g9jws5/hKytDEEUWvfzycKuj0kN61QIoskSDqxFFkamtrqSu0UPI38K+
      qgMcrSOlKAofXHop/xo/nj3LlvVD5ZHJ1BtvJGXyZCZcfvlwq6LSC3qXERZoZX9NLYosY7Wn
      4244QGV1LVZDnHpP4KjXN23eTDwYxL1jR58VHqkcc9ddXFZaSsG55w63Kiq9oFddoCRrKhZz
      PYIgUF9dibNgPM31NZhNJkKROJIkHTEj7Ky33qL+k0+YcNVVxOPxTt+NxGyhwUTNCBsZcnvl
      BWpxu9hTUUVubg4NDY2kpGVg0cs0eAJMnjIFvUZQvUA9RPUCjQy5qhtUNYAhYySWseoGVRnV
      qAagMqpRDUBlVHNYA5AliVg8PuReChWVoaTbkcHWz9dS5w4gAxpBw7wFC7GadEOsmorK4NNt
      CzD12JOYPDaXZLOZqTOOwagbWk+FispQ0a0BCChUHXAxduxYUlNs6LXqUEHl20m3Nbtm3x6a
      PV5KdhZT3eAZap1UVIaMbg1g3JSZpDvSmHfyCfia3UOtk4rKkHHYvs34/Cze/2gjU6dNHEp9
      VFSGlMMaQMnuPaSlWgn4g0Opj4pKj6huqebe9+9lfdX6ft3nsAYgIuN2uwlFYv0SoNJ3FEXh
      9c9e54U1LxCX4ke/YBTx0OqHePjjh7n29Wv7dZ9uDWDPzm2gNRKNRpG+Fjbr9/sBaHE3EQhF
      iUVCuJrUgfJgUFJTwkW/u4hrHr+G1dtX9+raGl8N17x2DU9ufPJbOZk5v3A+qaZUFo1f1K/7
      dGsAfr+fyTOO56wzz6StcS/NrREAAi3NFO/cTSzko66plcq95VRUVBDxN+JqCfVLEZWuZKRk
      UJBRQHZqNmMyxhzx3KdXPc3E70/kpY9fAuC5zc/xwpYXuPvdu/GFfUOh7pBy1bFXUf2zav5y
      3l/6dZ9uZ4JnHjebnduLqQhGKZo+E4fVAEByigO7rZFYLILFZifibyIOpDtSaW4LI0l6dYuk
      DhQFz86diAYDKRO7OhJ6khCTak5ly++3IMkSKUkpXZKIDuW5j56jvL6c59c8z6XzLuV/JvwP
      r2x/hfmF8zFpTYlrv00JMUbRiCIrxOUjdw/7lBDj8zThbvFjT88ixWIG2hNidpSUMWHSZJob
      atElpZKsidHUEmRS0XRMOlHNB/gK18aN/PuUUxC0Wi4rLcUypvMbfKDzAVZvX82T7z/JHd+5
      g3lT5x32vKHKBwhuDuL/3E/61elorO2/cSSW8WG12bjhM9KycjHb0hKfpaRlcsopmQBkZaQn
      Ps8ZKE2/RSiyDIoCitL+9yCzcMZCFs5YOOhyeoIcldlz/h5idTFiDTHyfp033CodlsMagCCF
      2LT5SxakOclKsw2lTt8KMk86icWff47GYMBSUDDc6gwpgkbAPMOM3+fHNHVk7x13WAPQGJKY
      PiVTnQfoJXIsxsc330zU5+O0p57C6HAMt0pDjqARmPjWROLeOLqskR1FfNiOoNlkotUfwGq1
      DqU+33g8u3axZ9kyKt96i9o1a4ZbnWFDNIros/UjfgG0bluAfWWlxBWRuKQwTNvJfmOxT5vG
      lBtvJNLSQs7ppw+3OipHoVsvUCQSpmxPGXn5OdS7WpgyaVyPb6h6gXqGuirEyJDb7VNo87r4
      dN06Pvl0fScvkIrKt41uDSA1awxTCrNpqq+hrtE71DqpqPQab8jLU5ueYnfT7l5dd9h2MC17
      DBlpqWjpXRBWLBYblllGldFHXWsdr25/FV/Yx4MfPsgtb93C4pcW9+oe3XaMYpEQXp+f4+fO
      40DD0Re9PZRoNEpdXR2SJGGz2bDb7cPS71P59nPFK1fw8b6Puen4myjKLMKgMTDR0bv8lW5r
      ZjjYSmtrK1U1LqZNP6ZXN0xKSsJqtaIoCn6/n+rqauLxOElJSWRlZSGK4oh3jal8M0gxpgCQ
      akrl9rm3c/7U88m2ZHc659CYq+7qXbdeoD07t7G/poZmr59jTjqNqWOdPVbqcF6gtrY26uvr
      kWUZs9mMw+HAYDAkvh+JHoLBRPUC9Z9wPExZcxlFGUVoxO6f46aaTSx+aTFz8uew/NLl6DSd
      J+a61WbStGPweZsJhmMkJyUNiLJms5lx48ahKAqRSASXy0U4HMZkMuFwONDpRvaMocrIw6g1
      MiNrxhHPWVu5ltrWWt4vfx9f2IcjqfPM/GHNsaU1yNix+Xy25kNSzz8PyyELYymKTO3+SvQW
      BxaDQr07QGF+Lj3p2QiCgNFoJD8/H4BwOExTUxOBQACz2UxmZiYGg0HtJqkMCNfNuo5aXy2z
      cmeRZu7q0u+2C9RQV8Ou7dtocLeSVziR2bOOxWw4aCvRoJfyWh/xNh86nZaMVDNRQwbOtKR+
      TYRJkkRTUxPhcBhRFMnMzCRpgFqgI8lVu0BDw0js5nb7qdFoItWRRV5BARjTO1V+AAWBSLAF
      QaND1Goxm82EIrGj7hBzJDoMJysrq12GotDQ0EB1dTVarZa0tLRBiUvqb5JGsDHImnvXkHVM
      FrO/Pxt62HCpO8SMDLndGkCK3YFn00aSzDl4vS1QkNX5Ir0Bg1aD1pREqlmk4oCbyVOmoNG0
      l35f32pft9K8vPY48ng8jtvtpqqqClEUSUlJISUlZcDeYv15K5W8XMKOZTvYnbSbaZdOIzkz
      uUfXjcYWAPr3rAdD7mEzwjwN+ymv8TJtehFJxp4PUGtra2ltbcXpdJKcnNzjAu5p8yjLMl6v
      F6/Xi6Io2O12UlNT+1yg/W2WG3c08sYlb+A83sk5/zwHTQ/XUR2NBjASu0CHNYBVb79BcnY+
      QkzLnDnH9lhYKBSiubk5YQg6nQ6n04nT6cRisfRJycOhKAperxePx4MgCIlBdG8KVx0DDB3f
      KAP4bM17VB5oZP7Z3yUv/fAV9+scOghWFIVQKER9fT0NDQ0Eg0HMZjNOp5OMjAySkpIS3p7+
      PhxFUQgGgzQ0NCAIAiaTifT09KO6V1UDGDq+UQbw75eXYc+fzIRJk8l2pPRY2JG8QLIs09bW
      Rl1dHY2NjQSDQWw2G1lZWTgcjk4G0R86jKGpqSkxC52WltZp4q0D1QCGjm+UAZRu3UBxRQNn
      nHUWDqu5x8J64waVZRmfz0dDQwP19fXE43HsdjvZ2dlkZGSg1Wr7bRAdrVBzczORSASdTkd2
      djZ6fXu2Up+6XsBWoAU4BejLFJ5qACND7mENYPUH71M0dQIVtQHmnXDk2bZD6c88gEajwePx
      JFoIWZZJS0vD6XTicDgG5OFFo1EaGhoSxpCamorN1ruk/2bgPkACbgRO7IMeqgGMDLmH1Uar
      RFm3YTORiMSESRPJtBkHTcEOBEEgLS2NtLQ0FEVBkiTcbjf19fXs2LEDrVaL3W4nJyeHlJSU
      Pj1MvV5Pfn5+4v4NDQ24XC50Oh12ux2r1XrUVicZcAI+IPuIZ6qMdL5RG2VHIhE8Hg+1tbV4
      vV50Oh3p6ek4nU6sVmu/5EZjUVZtWoUSUyjKL0q0DId7U0ZpbwH6uuiH2gIMDbIkU/JpCZmF
      maSPSe/y/TfKAL5OOBymsbGR2tpaAoFAJ5drTwfUHXI/LP6Qsx86G7PBTMnjJZgEU2KuISUl
      BYfDMaDxSaoBDA1rX1jLE9c8gSPfwf/t/D9Mls6vrAHXxufz0dzcjE6nIzk5GZvNhl6vH2gx
      AImgukMD6xoaGti2bRttbW0YjUacTidZWVlHNYiOCiEKIhqNhrTUg12xv6z5C//Z8h/uOvUu
      pjqnkpWVNeQVV6VvdJSrIHZf9oPSAohi+xqhbW1ttLS0EP9qv2GtVktSUhLJyckYjZ3HFAP9
      dpBlmWAwSH19PS6Xi1AohMViwel0kp6ejslk6uQFUhSF4qpiLCYL47IOroIRk2I4H3bS3NbM
      HXPv4OHTH6ahoQFFURJ5DX0xcLUFGBpkWab883LSx6Rjz7F3+X5Iu0DxeJxgMIjf72/fe+Cr
      ICWLxYLFYsFkMg1awciyjN/vp66ujqamJkKhEHa7PTGG0Ol0iRZCiSvIERnR3K7Lz9//OW+X
      vs3fL/g78wvnt5/z1VyDx+NJeJQyMzMxGo096ip1GIAcDqMxGBAHoGLIisymmk1kW7IZk9r9
      cuqjzQCOJnfYxwAdFdPr9RKLxRKFYzQa+/x27ameXq+X2tpampubkSQJh8OBM9uJ/8d+Wle1
      MvaZsaSen9r5wtZWcLkgPR1SDk4Q+oI+1peuZ5x1HDqt7qih3LIsU/vxx3x46aVknnQSZ73+
      Opp+/tbXdrzGxcsvxml1suuHu0gxdZ3AVA2gM33WJtDqJSJrsZm0ePwhMhxdm5eeIIoiNpuN
      pKSkRFcE2vvzLpeLaDQKtEeYGgwGrFbrgOQIaDQaHA4HKSkpCYNtbm6mtrqWDas2ILtlmv9f
      M8fOObZzYn9DA/j9IEmdDOCy1y7j3T3vcu+Ce3nojIdwuVzU1tYmXLc2m61Ly+DauJFwUxP1
      n35KNOBnTdNGdKKOM8af0b8BtwIKQxNmrSgK/9j4DzYf2Myvz/p1l5zckU6fDCAeCVBaVkl+
      QQHlFVWYjToatSYyUvq/EnBHwZtMpkQ4NLS/McPhcGLmuONNZjabsdlsmEymPvenO2Smp6fj
      cDgoXFGIZ60HzSUaampqKC4uRqfT4XA4yElKwmowoEnv7FLzhdp3YfGFfYiiSHZ2NtnZ2Ym5
      jL179yIIAlarFbvdjiAIFN1yC0okQvpxx7HVv4dznz8XAYEtt29hRnbPJx87uHDahaz/3nqc
      ViepptSjX3AYIvEIq/euZkr6FArthUc8193m5u537yYQDTDBMYGfnfazPssdDvrUBQr5Gti1
      z4NWiGM0GRmTnUpzUIszw5pIuOgtfXGfKopCW1sbfr+ftra2hGyj0UhqaipGo/GoTX1P5YbD
      YdxuN3V1dXhbvAgagTxnXiLKtd5fz8YDGzlj3BlYDAeDB5uCTezz7GN2zmxEQcTn8+H1epEk
      CZPJlPAo7Wnew8lPnoxG0PDF0i/It+X36ln0lI5ndKQyevyzx/nxuz9mnH0cxbcXo9foCcfD
      GHVGhK9l/MTlOEtXLmVDzQZeuuilI+bo9tVF3l+OJLdPBqBIMXbt3IVgSMZmhOaWIBOLpmMe
      ATvEdCTdezyexEBbFEW0Wi2pqakkJ3dOWOmtXEVRuP6N63lr21s8OOdBZttmEwqFMBgM5OTk
      kJ2djdncHjsVlaIc+/ixlDSW8Nfz/srSOUsT95FlmUAggNvtJh6PYzQaUcwKRoORjOSMfj+H
      w9GTMcBTm57ilrduYVrmNL687Ut+u/a3/GHdH/jlGb/kjpPv6LPsb80YQNDomDbz4HpBuX3T
      a1DoaAGczoNLuSiKQiwWw+v14nK5Em9AvV6f6EJ1VIjGL75g1SWXkD1vHguefRZRq8XT5uH+
      D+9nvH08t829jffK3sMn+div7OeH836YCLirq6tj8+bNhMNhkpOTcWQ6CIXaNw/sbh+rQ9dQ
      ikQiNDY20uJuIWQIkZaW1sVYh4obj7+RE3JPYEzqGPRaPe+Xv09LuIVVFav6ZQBvl77Nyj0r
      +ckpP6Eos6hH1yiKQq2nFnuyHbOh50GZPWXYvUAdDPXboaPStbS0EAqFEvm55U8+Senvfkey
      1cpVlZUY7fbEG9GgMbD7x7spby5n9d7V3D73dnKsXTeIkiQJv99PfX09pVWl7KrbxcKiheTn
      5ifWQ+qQ192zikajuN1ugsFgIj7KarUOiOemL16gLbVbWF68nBtm38CUjCl9ll3420KqWqq4
      5rhrWHbRsm7P+bL2S25+82ZOHXsqZ4w/g5oDNdz51J3MGjeL1b9cjV7Xe0/ZiHaDdjASmkdF
      UWipreWzhx8maepUcs8+G0EQqPRVcst7tzA9dzqvXP4KBm3XvIIjIUkSPp+Purq6RFh2Wloa
      2dnZZGZmotFoDtsnlyQJj8eD3+9HkiQyMjKwWCyIooiiKKzYvgJf2Mf1s69Hrzl65eivG9Qf
      8VPiKuG4nOO6LDJ1NO59715e3PYif/jOH1gyfUni86gU5Za3biEQCZCelM7fN/498Z0QEVBa
      FTLFTCoeryDZ2PtWUTWAfsrteCN3dGcAdDodKSkpR0zzPBwdy7/U1dXhdrsRBIHklGRsDhuT
      8icdtnIqipJIJJIkiYZoA/NfnA8CrLx6JedOObdHsrszgC8OfEFxfTEzsmbw2CePcf6U87nq
      uKu6XH/2s2fzfvn73DX/Lh77n8d69buD4SBLXl7CjoYdrLx6JcflHAe0v/Vn/3U2AL/739+x
      qWYTroCLTyo/SVx75vgzef+G93slr4NBmQcYTej1erKzD/q3Dx1TNDU1oSgKoiii1+vZ07oH
      US8yf+x8RKFzJWuLttEaaSUzOZOMjAzS09MRRRFvm5djHz2Wuro6fjHnF8wfP799Us7pxGaz
      JV4ogiCQmZmZ0CHJncQk3SR8YR9JkSTC4XCXEJOeEIgEOPf5c3EFXFgMFvwRP+uq1nVrAOF4
      GGh3lfYWT8jDJ5Wf0BZrY0P1Bo7LOY7i+mIqPZVcecyVhONhrp91PT855SfEpBiryldx4b8u
      JBKPMN4xvtfyeoJqAH2gYwDdURmhvUJurNzIoicXIcQEHjj9AfKceeyy7uKqnKsYZxrHomcX
      sb1hO69d/hpnTTgrcS9JkfDr/MQz4uQdk8fU8VMJt4apqKjA5/NhMBjIyMhIuFw7BvFOh5Mt
      v9hCXI6jU3SJcYNeryc1NTXRVToaOo2OcWnjaA23cuPxN7K6YnWnLsqhvHr5q2w+sJlTx57a
      6+eWZcniH9/9B7sbd3PlsVfibnOz6JlFNAWbWHbRMq457hoURWFb3TYAzpxwJhdPv5gXt77I
      uLRxh13gtj+oBjBACIJAmjUNs81MMBrk/s33gx44GzaFN/GXpL9QuqeUYDjIxpKNnJp3aiJH
      OT05nVXXr6LKW8WK7Sv40Ts/4p+L/8mFJ1wItC8s3NjYyM6dO/H7/aSkpOB0OsnMzMSkMyUq
      RU5O+4A8Ho/j8Xhobm5GURQsFgsOh+OwXVOD1sAH13+AJ+Qhx5pzxEqWkZzB/07+3749IwSu
      OvZgq+KP+LEarLjb3NhN7ZEEO107OfFv7Tl2X9z2Bfkp7fMhD374INfNuo6/fPYXNtZs5K/n
      /fWok3Q9QTWAAWSCYwK7f7ybDys+5IbXb0Av6jEkGTg/93xm2Gfw9g/fZqdrJxdPuZjm5ubE
      EpBarRa7xk5KRgq377+dllALn1d/zoXT2g3AbDZTUFBAQUEBiqLg8Xior6+nrKwska+Qk5ND
      eno6Wq0WrVZLRkYGGRnt8wl+v5/9+/cjyzJr969lVe0q7l10b6fZZrPejFnfMzfjvg/3seXJ
      LeQtzWPySZOxGY+eUhqimb3C6+RzFlbaK67FYGHT0k1srt3MyWNOBmBF8QqiUhSDxkBbtC0x
      DkhPSmdb3TYe/fhRQvEQLxe/zD0L7ul54RyG0WMALS1w4ACkpUH2wMWrxOU475W9R2FqIUWZ
      ReRYczit7TS+98L3SE1O5Ye3/RB7avvbbV7BPOYVzAMgJTkl4QataK5g0ZOLqGuq48ppV2Jy
      mliSt4Tm5masVmungMAOt2hDvIGQNsSisYvwt/qpra1l165diKKI3W7H6XQmYpg6om0VReH0
      V06npr4GySfx2Hcew2azdYqH6glr71/LmoY1vPzOy0zYMoGNSzcmZr/dkhuDYCBZbPfWKIrC
      8uLl1Kc/RlLOdjKZw2I+S9zrv7v/yw1v3sD0zOk8f/HzrNnXvrXsaeNOoyHQwKdVnwIwIW0C
      Zz57JhpRw4KxC7ho+kX9KLWDjB4D8HohEgG3e0AMIBqPElfivLr9Va57/TqykrMo+VEJqaZU
      2hrbyKzLRGfSoQvpjtpvvWTFJVQFqsAEn7R8wq47dyEqIoFAAJfLRSQSSWwskp6eTlSIcsY/
      z6Ah0MBzS57j2lnX4vhqQ+4Oj9WBAwfYvn07Go0mMX6wWq3cPOdmlm9bzo1n3UhBQQEtLS1U
      V1cjy3IixfRoId0zr5vJ2n+vRR/Uo39Tz+5jd3P8guPZGt7KmTVnkqZJ4/Mxn5OiScEX9rH0
      /y1l7lwf52SLWMWDuRZtkTYee/8xYlKMLXVbWPTMIpYtWcbK0pXccsItZCRncErBKSTrkzHr
      zcTlOFMypvDQoof4sOJD/rrhr1wy4xLmjpnb53IcPQbQMWBN7XuQWAfBaJCF/1xIra+WG0+4
      EWjvQsSlODe9eRNSTGLp8qWk56TTammlpaUl0ZftDpvhYBfCYrAgIKDVahNroHYQi8VoamrC
      G/BiCBjAC1FftJPrucNj1eG1ikQiNDc3U15ejs/n4yThJBafvZjcrNxEa2G32xPnNjY2EolE
      UBSF1NRU0tLSuhjDcTcdx9PXP03mkkwq11fy0vde4vg9x7M3updmqZkWqQWP5CFFk0KyPpnv
      TPoOn365lvum/40Ts85O3CcQDrDfvz9xnKRL4uQxJ3PWxHYHQVOwiWeXPMv4tPGMeXgMhcWF
      aFwaTmk4JXHNO3veofwn5b0rwENQ5wH6IHefZx+T/zCZmBTjxYtfZHbubDKSMihuKOb0p9s3
      x/7ghg8oSC1g5p9nIisyG27dgMVgodBeiCiInTLC2mJtlDeXIwoiBakFnYLpDoenzUNjsJE8
      cx5NTU1IkoQkSYmQ8cMtEnDoSn2BQCARNvLfmv/y63W/5p4F93DnvDtRFAWfz4fb7UaWZd4u
      f5tHNjzCXWfcxd2n3g3Ax8s+5vk7n2fe5fO44YkbiCkxXvS9SLo2nXOTD85JxKQYD3z4AHXh
      OuLHxvlpxk+ZbpwOwMvbXmbZlmVcO+tazpp4VmIw7GnzUPTHIpqCTbxx5Ru8+vSrRP8URREV
      3r35XcKpYXSijutmX8ffL/h7l995KOo8wABTmFrIsxc+S11rHcc4j2GfZx9BT5APdn0AtL/F
      j8k+hnp/PVGpPZ/hileuoNxdzi8W/IJfLPxFp/uZdWZmZs9MHH9Y8SErS1Zy/ezrmZE9o8t8
      AoDdbMdubq8sHfkRiqIQj8fx+/1UVVUBJJaJ7AgZ1+v1FBQUMHbs2ESIeV1dHa+ufpXmimae
      DzzP+c7zyczMRGvS4shxYDVYWf3papp9zbyy9hUW5yzGbDZzwsUncOKFJ2Iwt3uzdIKO61Ou
      76LrtvptPPLxI+0HMYimRVk+fzkNgQae+PwJUkwpnD3x7E4h3FEpSlusDUmWuGlhx/UAABsh
      SURBVHzF5Zh8JuYnzSdqjhI1RbGb7Ny74F5um3tbX4owQZ9bAEWRiUsyGlEgFpcx6Nunxb/t
      LUBIDvFF+AtmGWchSiJFfyyi0luJtlxLXInDBHBanZT9pAyzzsxn1Z8hyzJ3vXsXG2s2cu2s
      a3luyXNHzAme8PsJVLgr0Gv0/PKMX/Yrxr5jOUq/308wGATajcLhcJCcnJwYW3xZ+yVPbXyK
      yyZfRrYmmxUbVvDk+ifBBG/c/AaaZA3PbH2Gq4+7mrn5cwmFQrjdbtoCbbh3u8ktyiW7MJuV
      e1ay17OX2066LeFV8kf8fPfF71LtrybplSQKtxRy2YOXsWXWFh79+FEA8m35rL91Pbm2XPa5
      9nH9v65no3sj4cYw2AAdPHDiAyycvJCl7y9lR8MO9Bo9xziPYVrmNJZMW8LZE8/uduwyKC1A
      bWUZB1ri2I0KkViMnHHTsCcPTvriSGKpaynP+Z7jEsslPJP+DIFo+zayceJoajXcfeXdXHTi
      RSTp29/KHe695Zcu58OKD1lcdPR9bM+fej6Pf/Y4USnK5trN/dJXFEWSk5MTkaUdm5j4fD6q
      qqoSGXi5llyeOO+JREVZt24d9Wn1EIFtVduYnDSZxebFGJoM1OvqycjIIC8vjw2/38Dqu1aT
      PCmZnH/lcNWyq4jGoxjCBm5beBueGg96s54Pb/wQd8DNnU/fSTgWpvS9UoxFB2etq33VHPAd
      INeWy5sb3mRt/VrQgg4dC/YtIGdMDreedCuZWZmM2TiGHQ07iEpRNtVsYlPNJt7c+SaVd1d2
      mwZ6JPpkABG/m+rGVuKSjJJkZ3xeNk3+ADaTrV87xAwHvZXbEdYcV+Lt2zrJ7dffevGtfP+4
      7zO5YHL79/HO4c/51nyuP+76xHdH2iHmkTMf4dpjr2Xl7pVcPuPyLvfqDx0JMYcOsDsS/Kuq
      qhI7x1xaeCmBYIBLjr2E6068Dq2oRZZl3G43DQ0N7NixA1EUqdxdSZAgabo07jHfQ3RsFFvA
      xozcGXzwygf87bq/YUo2cfltlyPtl7jzkTtZ+4+1eN7zYK+2c/+E+wnOCjLzoplMTJvIC1++
      wMwJMzmx/EQ2ejaS35iPbaWNAAF+tfJXPLL5Ee6YcwdtsTbmZMzhzRffxCN6MEVM7YGG8QiW
      dAt648GX8ZHKuE9dIDkeIxAMUlldi9Ug4A2EmDB1Jhaj9lvfBQrIAda3reck00lYRSv/3fNf
      NlRv4M6T7+yyA+GW8BZurL+R08yn8buM36ERDj6XLl2gYBCqqmD8eOhmFeuBoifRoLIsE4lE
      cLvdhMNhFEXBaDRit9s7rdwRjUZxN7nZ+clOQmKI34q/ZbO8mQemPsDdU+5mxwc7ePScR1Fk
      hUIKiRNn+vXTSS1MZf0v1mPChAYNlmwLd9bdyb3v38vDHz+MRW8hPzWfXa5dJPuTufC1C2lr
      bMPisPCn3X/CktbuJHj9odd59YFXE/nP2ROzcVe7mTR3Evetug9R066nGg06THJ/5PoRf/T+
      ER066ifUk6Y5uEthFwP4+99h926YOxcuuWRQ9IG+hUMrikI4HMbr9SYiYjtypI1GI+Wxclb4
      VzB391zeP+d9BIvAaY+fhslqonF7I2WPlyHUCNjybJz3zHnkzctj53930lTTxPo/rafwjEJO
      u+80lu9Zzj0f3YOCQpI+iauPvZqJjoncMPUGdn+6G12mjof3PYxJZ+Kp7z7FJ898wjNLnyGu
      xBFkIZGuKYgC373nu1z8y4sRRVE1gG5xu8FkIq7XD5rcNcE1XFZ3GaeaT+Ul50vohIPx810M
      4J//hB07YP58uPDCQdEHBm5ZlEgkQlNTE22hNq6ou4LNymZmfzGb8+4+D1ErcuvuW0nKTcLl
      clG1t4qmqiZSx6SSm5ub2D6rA3/Ez373fmyyjf995n/ZWb+T2Xmzee/W97Cn2hMD25UlKzn/
      xfMB2Pj9jRyfezzVu6uZ8+QcTnjyBPThg90eQ5KBJ6qewOqwqm7QLpSUwNNPt4dF3HknDJIB
      nGY+jerx1WjRduvK7MTVV0NdHeSOpATTw2MwGMjNzaUp3kSpXAphmHTqJGb+ZiZao5awKUwS
      SYmlKxVFwe/38+DKB3nh0xe4YeYNnDfzPNIz07l05aVsb97OsouWcc6J51C1oYrFcxYjIFBZ
      WYkkSWi1WsYbxnPu+HNxfeTi6TlPs/emVRSc+SwXzAiyZ6Kf3O25hGhvoaSYhLfOi9Vx5J1F
      R6cBBAIgy+397gEcYH4dQRDQ00PPmF4PBQWDpstgkapJ5bqU6/g89Dk/z/45RScUJRL+Gxoa
      iEajaDQaUlJSSEpK4iPPR7jtbkqSSrhvxn1UVlfiqnAheSS+2PQFPzzrh9x2wm1kp2YjCmJi
      lrri/QpW/WAV159/PRubN1JcW8y7z+9mybGVnGs149x1ChICZWIZMTlGPBpnf/F+xszofoW8
      DkanAcya1T7QtNuhm0W2altr+f6/v8/k9Mk8fNbDaER1IdzDoRW0/CXzL50+E0UxMRsN7d2u
      lpYW/vTun9hTvgeLxsLP5/2c5ORkZhTNYNUDq9jZsJP52fPxNHmoqqxiZ3RnIikoPT2dHS/u
      wL/HT81rNZz6o1Op/qSa2RNnU//fEI1f5uKRfYyZP4bLrryMF5a+gBJT2PflPuZfNf+I+o/e
      McAR5D6x4QluW3lbIgm+ILVgwOWOxsVxb3njFp7a/BQ2vY3tN24nEo4k5im+nq+gKEpiHabG
      xkZc211UvFDBSVecxGv/9xqtrlbSSSeL9j2sbQU2wv4wZZTR4G7Akm5h6QtLcU50otfrycjI
      6HaZzdHZAhyFc6ecy8rSlUxJn0Ku7ZvRJ/8mMCd/Dk9tforWaCut+lam5U1LrOK9f/9+JElC
      r9djt9sTRuFwOFAUhc/GfQYngN1ox/CuAa/XizFqJEWTQkpqCr79PsJKmFZaMWNGF9Ixc/ZM
      zKnmRFRtNBrttEp5SkqKagDdkZ+Sz/vX9y0B+5tKTIoRiUdI0vdtp05FUSheVkzIHeL4245H
      a+xatRaMW8DJY07GYXYwPq09x1cUxUS+AhwM53a5XADYbDZahVYWPrOQmBzjT9Y/Mb15OsfM
      OYaytWV4FA9+sx93s5sQIWRkdOjIGp+FQnsLm5SUlNgH7tB4qfr6erULdES5sgzhMJhMMMC5
      qCOpCxSTYiz51xLW71/Py5e+zKIJi3p93+Y9zfxj6j9QZIUlry9hyoVd1w/qyyp8Pp+PigMV
      LPznQkJSiJs/upmMkgx0Jh3xUBxRK3LBSxfw6HWP4gl5CBMmThwRkVmnzuK+N+8j2ZqsukH7
      RGVleyZZRgYcslDvt41QLMS6qnV4Qh421mzskwFYnBYyZ2YS8oRIL+q6F1df6AjZmJ0ymz2/
      2kNrWyueUz1sfHIjRRcWoWnTkDMxh4nnTGT+mvmsW76OkP8rNygSJWtLuG3ubVzxxyuwWCxk
      Z2cndgtKyFBbgCPILStrXwo9LW1AXJSyLOP1ejGZTO1rgY6QFkBRFN4re49NBzZxx9w7+ryy
      tBSVkCUZnan7BbP6UsabD2zmutevY8HYBfzxnD8mPHLxeByv18vOd3aiT9Izdu5YTFoTf77k
      z+z7ch/OyU72frGXMTPH8JtNvyEcDlNfX09jYyPhcBir1YrT6VQN4IhyY7H2OQOrFQagotbW
      1lJWVobBYOD4449HFMUuz0oCXgJaUKh3P8qGwHv8LetvFBl6tpbm0fimbZBx/wf386uPfoXN
      aKP6p9VYjQcntg5sOMCy+csQBIHL1l8GqRDwBtCIGux2Ox/89QPO/P6ZOMZ03mNalmVaW1up
      q6tTu0BHRKcbkBTKDjoq+5GWQmwEPgNkBNZGdlMe+oRXWl/hofSHBkyPbwotLS1cXnQ5lZ5K
      5hXM65IppzVpETUiokbEarHy7i3v0lzazPmvnM9vbvgN+4r34Zf9XPnglZ02QxdFMRENqxrA
      EJKZmUlycjIGgyGxtmeXc4AFtLcAafoJvGOYzpW2K4dc1+Gm5sB+3tr6EFUhN0ZdOhcUXdDl
      pZE5M5NbS26lpW4dNaU/RWMzE6jP4KlLn6KxrpFkkrEZbImdS6Hdq2S32xMtYJ8MQJZilJeV
      IWtN2E0iLm+QSVOmYtAOrKfk24YgCIkgsI64+68jApcCESXK6cF3KY+WsyO8g4n6iYOuX6Qm
      QmhnCOsCK6Jx6LtI8NWmJ66tuMJvojvnWfKj8OAfYKJjInfNv6vTufGon6aaxwm6y5GlCFkn
      RRGlIjyWVqpeVtAaDNjSbWRnZ6PT6ZBlmZaWFiorK5FlGavV2sf9AUQthYVj2F1xgBZFZHy+
      g8ZmH850y7c+IWagOFJCDLSnXu6N7iWshKmIVPQ7KSZSEcG7wkvKxSkYJhi6GqAMe87eQ6gk
      RM6vcsj6WVanrxvEtTSKm5gs3YRe6XnWVZ1UR7PUzHT9dGSpe6M/lHBzKWUrzkEhivkKPbFk
      PYVWJwvHLkw8g1jIzYGtTyPFwwTdewDwlKRR9V4KU69dx/jUCN4GKF4d5aW7X2LaomnkTW33
      4h0aouH3+/tmAEo8wp6KaoqKprCnZBeBQBCtKblTH7cvDMcgeKjlrm9bz293/hZ5tcxlcy/j
      ilOvoHXfPvQpKRjtBzcaTCGF/+T+h+JIMZdZL0Mr9k/H8jvKaf2gFd86H1NWTekyCFZkBcHY
      3oJrTJpOzyRGkA+4lDDNSJoox/NAj2R6JS9zauZQH6/nrZy3+I7pO0d/1m1a5IiAgIGz/S9j
      S5/FHUs7b8DobthMq6sYRRHRCkWkTSxk8mmLOf6aMAdKf0XYX48hloRBK5E3K4+MMRndyk1N
      Te2jAaCgE6Fqfy1jC/NpcAcYk9r/nRu/afjX+dl79V5sZ9ooeKIAQdO1C+j3+zlw4ABZWVmk
      pqbyW89vefv9t2ELbN+3nflhB++cey5JublctHUrhkMGa7NNs5ltmj0gulpOthDYEMAyr/sl
      VwRRYMrqKYQrwiQd27ksNRjIYg51fEo6s3osU0ZuXygAiCrRnl1Tl4P0uycAMM09kS+yinnG
      9wzfT/k+J5hOACA150S8+7ew4/kGyl/TcfaL0wmZDuBM02Gy5bH3bQ1KSTKnzExlyRuXsXnl
      Zo458xhsmV2XcFTdoP2QW3NfDXW/qUOTquHY6mPRJHf93du3b8ftdmOxWJg9ezb/9v+bX3z+
      C+T/ylxz6jV8N5TLh1dcgT41lct278acMTj7gymygtQiIVgFBLH3blCJKFElwJZQKXaNnSmG
      nu0UUxYtoz5ezzzTPBRJ6fSsQ+4ypEgLSdmzEb7Kl4g1xai4ogLrKVacP3NySt0prA+t56yk
      s3gv7z2keBgBgTZ3jL9P/jvhljCGKw1MP2MvGWYvoCDHQZEFUATCEQ3//EGMotNn89OVP+2i
      n+oF6gcZt2QQa4xhnW9FTOq+QmVkZOD3+xML1V5guYALFl2AvLB9rCQoClqzmaTc3EGr/ND+
      hhdtMo17P8CYnIU1+1hWtK4gpIS4xnYNWuHIVUGDnjXBzzn3wLlYRSulY0vJ0mYd8RqAifqJ
      iQF8nIPjmFjQxZ6X/wcpFmD8BcuxFS4EoPKmSlo/aEWfo0fQCVxsuZjKWCUXWS4iEmigbO0v
      EUQ9k0//NYtfWczaB9bid/hJ1oXgq9zg9t6iAiiY9TKFxwhY07tPjFENoB8Y8gyMfWrsEc/J
      ysoiK+vwFUXUaim84IKBVq1bPPs/pbZ4GaLGgHT6jVzRcAUA5dFy7k67G7vmyJudawUtAgIa
      NIj000skiCCKgIBwyPhG0LV3I0PSLrwHGrk95zbusN9Bc7yZfQ0biba1uzOjITdNpXtIP/Ez
      THUZTD7l57h2/o1IoKGzGAEuvGcSRYtu7v439e9XqByKosjUbH2OVlcxBccvJdkxabhV6oTR
      lodGb8GYnEmqaTzjdOPYG9vLbz2/xS/7eSLriSNev8i8iC8LviRFk0KGtmetVceSjXq9njbv
      XhQphDVzBjpzOlOu/Agp0orJMRWpVaLl/RZyf5NL6o2wv+X/2LdBwTF7KbGMXObWzSUkBXh9
      6v1MT5rEFtsfEU/y4nSGQIni2QpNJQrWcSDHDHjLdNinBhAEMFmTEDXd9/RVAxhAZCmKp/pT
      pFgQX/0Wkh2TCFKHj3KymItI5xiZUGmI/Tfvx3KyhbxH87odRA8kyWkTmXrWn9Fo9Gh0BrYV
      buOquqt4J/gO4/Tjjnq9IAjMNM486nkdSJLEli1bCIVCTJ6Qw4ENv0KRooyf91Ns2bMwWA8G
      GNbcU4PrCRfGyUbE9AjKlWbCtgDnLL+EasK0fqcVwSig5E2jtbGUxop3CBX6me5bTFr2PDY+
      UkryxPZFyvSGqWz7k0LeGfVMvMRFa/2XBD17u30hqQYwgIgaA7nHXEugaReOsWcgEWUlC2lh
      NyfzZ2bQeY9dzxseAhsCtO1oI/tn2ejSerfrYl/Q6MyJGdVkMZkVzhXUx+vJ1w38zvTxeJxQ
      KIQkSYQjcUSNHlmOI2pNXfVKaXcgRPZFUHYriGU30PLvOnZuewOAHxw4l0tON1FwYD11xRXk
      M5OWsc0UnvADYv5mDI51bP9bHmP/R8t5T91O6n+8hDzNSKYVgIixm+1sQfUCDapciSivcQxe
      SpnHX5jOwYVcZVkmUhWh5sc1JM9JJvsn2Qji4M+kD3UwnMfjIRQKkZ2dTTTUQlhu5aG2x9EK
      Wn7l+CUG33ugsaIknU6opD2Uuea+GmwLbDhud/DsRw8Qq9rEuQsmkD8+RiQos/OdVhSlvX+v
      0SUhxYIoCoT3f5eJZ59BxvTO3TN1XaBhlNuGCx8VZHIiIp0jEkdKOPSAI4dB8oPW0SmRKB6P
      syayhjNrzgTgajJZFmxEQAPTdoPh692wKJ6aB2jz1BCL2Cg8IZeWmkyKl7tIKUhD1n2CJXM6
      QXcZ8Ugr2VMvwll0cRd1VAMYgXK/tQYgR6D8LGjbCmNfAdvBDTHi8TgttLCkdglbI1sZF2vl
      47CAVZsJU7cjizYEQWy3GSUKQjkIf0VRINB8EZb0MxP3UhSFeMSHVp/M3g1/wFf3BSbbGKae
      +fsuKqkLY31DqABqgJOhp6sJjTzkEIS2g9wKoZ2dDADAoXXw8ZiP+TL8Jb93/54vk85lQfJZ
      tAUCVKy7D705jYl5ZYjBtVD4ONiyEQQDlvTOy5sIgoDO2B6TlD1lMaJGR9qY3m/dqrYAI6QF
      CAH3AAHgQuDsI1zbHwa9BVAUCHwCbdsg/SYQD+48eaRn3Vz1Mfu/eAJBECjKX4NB0wzZ94Pz
      wa/O6Pv4SG0BvgHoACewHxi4PSyHAUEAy6nt/3pBau4cYiEPerMDfcq1ENgAGbfTn4rfE9QW
      YIS0AABRIAxYGLxi/6alRA623H4/BW9jHbtKy4gfPdRb5SjoASuD/c4bBCLV4PozRA8Mtya9
      pt/m2OhpZUymlYZmH06HJTH13dGwdEy6HO04Ho8n3k5HO18QhERCR2+PoT0ntOO4Q9fDfd/T
      40OTW3pyLMsysiwn9ujqyTNSFKVPsg49VhSlU2phb2Qf7li3/yYE/yok3wdIBW8e9vyO7Zn6
      U159Oe6Q3V159dsAFEUhLklfua+ExL8OBEHokvX09c86jju6A4f7/tDjr8voz/GhlbCv9zua
      vl8/7vi/Q3ZPr++LrEOPv14xe3t9t5+ZiiCwFsFUdNTf0/H9QJbf0Y47XjTd6dPvMUCrp4l6
      t5/x48eiEdQxQE/5Vs0DKFJ790efC8Lhf89ILON+a2O1p2O1D8xKYCrfUAQNGI68Dv9IZXhS
      /1VURgiqAaiMalQDUBnVqAagMqpRDUBlVDMoPqm+elYHOCpjxMsdTtmq3HYG3AA6ZvEOnXHs
      +Ptw/3ecc7j1Mjv4+ixmd591J/dwf3fMBvZFbk8/7+43dzyngfjNPfmNX5+9/frffZHbk985
      GL+3N3J7UrcG3AD6OsEyXAFaX58lHCq+PiP7bZfbIXM4nvWR5A54NKiKyjeJYRsEN9TuZ2fJ
      HiRZQZEl9uzawf5aF60eF2X7agZXuKJQXrqTyuo6AOKRIMU7SgdXZmcF2F9eSpOvbcgkylKM
      bduKkWSF6n3llJZXMthvPlmKsWNrMVFFobqynN3llQR9boqLi2kNxQZFZrDVTWl5JdC+TlPF
      nhL27a/F01jH9h27CEcj7NpeTK3LAwybASj4AhFyU000B8JEW10Y0goIB1rQm5OJhwe5YoSa
      kJNyiIb8AMho0B5m4aTBQSHZkkRbMDJ0EmUZnV6HrEQJxbQkyVHCgyxTlhWMWi1xRSIcF7Dq
      4uypbmT69Kk0HKgeFJkavRkl1v7LYiE/otmOHAnQ4PEzqTCb0i+/JH3CdAItTcAwtgBSPE44
      EkUriggaLbFIiHg8jtFoHHzhGh3xSFtivXm9wYg4pH1iEaNx8NcAOhSNzoBeIwAi8XiUSDw+
      6IWv1enRakUEBOKxOJFoDK2gEAqFUI6yFmlfObT+iKJILBohFo+jyBKhcAi9yUgo2Eb8q70K
      hskABPJzMmgTTFi1EjFtCibFT1buGOprqpGkGP62QXw7GlKxG6OkZ+fh8/lo9TQRj8epb/IO
      nsxDkWIcaPAS8LkZqjyiSNBHOBqnrt5NdroFoz0DwxDIDMbjuOqayHLY0FocTJ1YSG2ti7GF
      g7PtbGP9ASQpTk1VJd6IiM0A9sxcxo3JockXY8qMY1B89eSOKQTUQbDKKEedCVYZ1agGoDKq
      UQ1giIlHI3g8XuKSTDgc7sYVqeDzevB4PMSkQ/NaZXwtXiS5+x5rJOClyeMj0BZCkSX8/gDh
      cJiGurrDXqMCmgcffPDB4VZiNLH783cpaYKdO7bT2tSA1W6hdE8VTeVbWVfWyNSxOezdvp51
      O+oYl+dgV2kF6Rnp1JZuYmtlC2n2FKrKStAl2aiuKCUQE0mxmPn4ozU4DGH+8cZ6pmTr+f3T
      r2LWSNhNCqUNYXIzer6z42hCbQGGgTHjp6CJBnB7POzaUUyzx4vZaCKvoBAQycnNJcuZy8er
      V5NvF/hwYymZYyZC0MXOjWvYUl7D+s824Wps4r333gMkorIGg0Yg3WqiuKKRwrx0vF4vjoIC
      XPsqh/snj1hUAxhi9MYk9hR/jiUzD2tSEs6cPPyuA0jJKdRW7gVA1OoxG/WMyclka0kVY5zp
      BAMBkm0pCMl2zDodEwqzcTW1kGZPBTSgxBF1BqZNLsAdlMhIsZKUlESkxYvJfuStj0Yzqhv0
      W0JD1R5kay5Oe+ctTstLtpM1dioWo7oKZneoBqAyqvn/rsgmRcBU4zIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 5' width='192'>
      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
      ZP/+CxDoi6dfuCC/AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 6' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nMy9ebDs2V0f9jnnt3T3r7tv993vfeu82Z5mNCPNIIlFgBZbEhIye1GsAYML
      jO3gYFO2SaiUnUrFcRwXIWXHdmFSJDKB4BiwCcQEEKuEjISMNIMyMxqN3rzlvnn33a33X/dv
      OSd/9P2ee/r0+S19732j+Va9uv26f7+zf/flsN3dXck5BwAIISClVJ91oO8BgDEGExhjYIwh
      TVP1neM4kFLCcRykaQohhHrOcZy5Psz+qE/GGIQQGA6HWFpaUs+kaaraozmUBX0+WTCZTFCt
      Vku3p6+L67pI07RUP2cFxhhGo5Eaq7529H8A4JyDMab+77ouqtUqhBAYj8eQUqo9oXUFgKWl
      JXDOkaYp+v2+2mP6nTGGKIrg+/7C8zWft52tMm1kvaefIdv3Lk3UbET/rP9Gi8s5n2lcXwx6
      Lk1TeJ43g1h6m67rqueKJs45RxAE6Ha7aLfbc2PUx6D3YSKuOY8isL1j64tzDiEEXNdVh58Q
      /kEDEQgiAjYE0PeNgMbreR4cx8FwOJzZV2rb931wzpEkCVzXnSFcJuErO1/b+tM5XJSY6e/b
      2jb3S//N1TGefijCSr0D/a9t8kmSzCCYPkjGmPo9bzIEjuOgUqmg1+uhVqsVLpSO3CZH0eeb
      Beacip6ng58kSe5zp4W8Q2OCSdiIuptziqII1WoVQRAgTVOMx2PVl07UpJTo9XqZxKrswfd9
      H0IIRSAIPM8DYwxxHJdqJ6/vvMNvgjpBZ2HVJkKUbcvGFXREsQ28Vquh2WwiiqLCyZlwVmqc
      974QAkmSnKvIU2Yt9TXTP5O4Q3+zxMQoihSnqtVq1mdJlNNFJBPyxFkdkiRBtVqF67ozffm+
      f6rDXwR54joAuPSlfvBsIoutUdsBzhuAToFtVJmeKdp02qzhcIh6vT7XtzlpGwss00cWZXk9
      xBpbf3msXIes8dm+t4kL5v8nk4mi2Lq+WKZPE4hQVKtVVKtVpGmqxEf6e1Yw56DrnuZ4XWBW
      jNH/ZkGeiKR37nmekvH1d+l5IYRShm2HqwgJdSq16OEsKwKVGUtZWHSDi+Zi09N0LqA/l0dg
      4jhGFEWYTCZW+T4Mw1Nx+CwghTtNUziOg8lkkqvIloFGo6HGNxwOS4vorvmFKSfalCkd8qiS
      4ziIoiiXU+jIwRhTcnQZsB3QRZQwE2x6kCkLnxY452g2m5hMJkrOLoJF+tMtPGXXgvZuMBgA
      mJUCsiDr8C+KFJPJBADORV/yfR+VSkWNg5AZKF4DN8+yYQOTcuYd7qz2qD/dSpJFufQ2bYi2
      KOWwIbHJSWxjOKvYI4RAr9c7Uxu2w20T9/IOqbl3plGiqP+sZ18vsdAGruuqMTDGEATBDOHN
      VYLJxFUGg7OQxJTnAeRaaLJkWiDf/2D243neDAWxjcPWN+d85h+9a2P/trZPKwach/igt6WD
      ab+3HXZb30IIxfWLdIqzzP08gfZKCAHf9+H7vrJOke+pDDDGpmZQekE/AGURIus5z/PmZEq9
      7TyZtMhBZvtsyrn0XVnIQrSssXwpKZ4NbPtg6gVnBWora+6O48DzPHieh/F4PGfVqdVqyt9w
      lvGYCi4A5VMiEyuNt6gN7vv+zA8kS5XpXAebxSRvAKYlSG/X87zcMRCMRqOZRbaJLmeBMptk
      IsuDpI4m93q9rVF54Ps+qtWqcqqRWKJDGIYYj8fnNm4So3UuRghQRpeRUoK7rotms6kUCdvA
      8xrRB6N3mGcTzxKj6L0s0cOEdrs9I8IAONeDkYVQppihj+9LJR6Qx12HPP2F5lCGaBTNiURo
      WvsoipTn3hSFkyQ5k6nTpnOORiNEUYQkSdTfsuA6jqOwVwiBOI5n4nRsVh/b9/rvpoxfVjcw
      J2b2Q4usg26fPo3oo487S6HPCvvIG7ttnfIQ/7TjznrXHKfNfk/jzNuTrP3XwXVdvPrqq+j3
      +7hw4YLiyoQA56k32CSNJEmUJYueKSuBuIPBAEEQwPd9OI6jfjQD5PQDQourL6auhJ0WqB/y
      8hbpD8DU/jsajeA4Dmq12ow1ydaGTVcwP+vP6nPTn9MpaBmFM894kPX7IkDsX+eANuTSx2si
      /VnG0G63sbKygsFggJWVlRn96by5Yt4487iLTe90yRXebrchhMBgMFAHSvf80YtnGRyAXBt/
      WZnb7K9arWIwGEy1ek2Es1F1GwWxASGiqSPZ2jqPdTGfXUR8BE7s6Vnzy+M+RUF7cRyr0IWs
      3xljaDQaODo6AmNMObcetEhoEp4sopT1jkssJI5jcM7R7XYxHo+xsrIyZ2K0sf9FWHwRpGmK
      OI6VIs4Yw3A4VDEqej+miFSv162UOA/yqL6UEkEQlLZIme+X+Z2eMb8bDAbKs1kWCFFpz05z
      8MyxjEYjVCoVMMasxgZdRFxdXVXEbTwel3L2FYkptufNMZjfu66LIAiQJIk613lnQoVCDAYD
      OI6Dzc1N3LhxA9VqFZxzjMdjpbhk2e3zlC1qv8yGmFyH7Lpk4tLB1pepAGfpI2X0l6Lx51Fp
      W7tZ/7f5HpIksVrjFhVXTCJR1jJCz3mehyiKZkRLAFbfCUkS9EylUkEcxydmSi4ASAh4c6Jz
      Gb1KH2PW4SdCaRJFOsNkPSPEALRQCCEEgiDAzs4O1tfX1SQAzCgYNsvPaWTHSqViDZMw4bws
      OmXaPC01WqRfM+5pEUQy+y06zOYzZean76fjOAjDELVabeYZXbbXkSyOY7Tbbdy/f1/lgnDO
      0V6qIbzzB4BMUd1+JwQCeJ43R53LjE1HUh0456pNzjmq1apyiumJOvRer9dDGIbThBhqdDQa
      wfd9uK6r4rZ1xThLqcqDs8iBi75njs+0xpAVqaziabNEnQbKtLMoISmS7U+j3GZxVfrNHL8+
      L/1fq9Waoba9zj48EQOQkGmERPrY3d3FpUuXFgqBtokydFbp/7VaTSXw5M29Xq9jPB6DVyoV
      ZQGqVCpotVrodDoqKC2KotIDLAtECRdh41nAOUdFduDzSD2fZ5ExNyuvX2Lxp0Vih6XwJzfA
      Wb4ylpXJdVrut4gelAemFS1LlDMlAdIrKSCtubyF6tZXwF9/G1KnDc/zsLq6inv37qmIgSIH
      rG0urutieXlZ5ReQE67MupFS7x4eHkLKad7uaDRCGIa4du2aYh/k1rZh/1k3KG9zfN8HY6xQ
      maqMXwa7+a8Btwk8+mOI0inHMhFM36TzorR5wBhD5cY/BT/6JJz192F8+a9kKsU2BHPi+2C7
      vwu0nkTSfEspk7DZ5mnGbbZvRuva+s47C2maHrfRBBwAx/NwHAdra2u4ceMGHn74Ydy+fRsX
      L15Ufbqui8FggFarpSxKFE5Oe0hcRkqJw8NDpYesrq5ieXk51ynK2DRozl1aWlIshDGGtbU1
      hcG+76s80NPIa7YFBaASrIsosM7KMvsQk+MXEkCmmK7ybH9Z4lseZLH7hcSJdIq8TIS5/VgR
      Y/9jQPc5YPAF8CefUeEhSZIUuvrPS29iDFhuVsAgIDErUtj0mSAI4DhOKSsQvXft2jUIIXDh
      wgXcvHkT29vbEEKg0+kgCALs7+/PhH40Gg1FDHzfx9HREfb397G+vo5GowHOOXZ3d/HFL34R
      Fy5cyEydZew4A25nZ0fqX9JfzrlSfhzHwWAwmHMx51k3TA+gTi3IuqBbHEjciONYhWXEcYww
      DBU3sIHrcHjjV+BUVzFmK9Yx0rt6emDWptCYTPnWnJ8+9ixwRR/e8EWw1bdhFJVP9A7DEEu4
      C3b33wPttyBee78aAxGlIuU5DEMlFhBQvnIZcQMA+PBlpPf+ACy4AHbhw3P9UQyO4ziqWsdo
      NMoMgjRBPxN03rrdrhLH9d/I49/pdJR0IqVErVZDu92G4zhK8RVCYDKZYGdnB77vY2trS+Uc
      6yCltCMAbW6tVlMxJmEYFlJtXfHQ2wKgZDN6Rs9Fpd+iKLI6n0ajEYIgyOyTKIMZHKePSX+2
      CAHK/lZGnKrX63BdF91uN/c5HWi+tjACWhvOea5+duPGjSmLd13FxYfDoQp7ocoaecAO/yPE
      4WcBpwrn4e+HMJaGEIBzrkyOo9FIHf4iJLBR5rw9oKQisi5ROZdarWZ11KVpim63i729Payt
      rSlE0UGZQc3NJAfI7aN9dMYjXGy2MRkOFVUhFkhVBeI4hud5M8pztVpVkyG2TUFyhAwOS+G+
      +rNA3Aeu/mXELJijbtVqNdcrm0cNTfnUpOYmopb9Luvw08ZQaDBVWqhUKkopLBozge0AkXzs
      um4uAqytraHf7ytq2W63IaVU+1oG2PKXwXECiMrm3OHX5yGEQL/fV9+VNRqY4TNZOhJRd4o2
      NaWJrPk4joPl5WU0m03s7u7i8PAQFy9eVD4uwEiKN9l6mqa42dmHBOByjiXBcHBwgEajgclk
      giiKEATB1JzEOXq9nhJhyA5M7biui9XVVTUpJZYkXWB0G4AEH98B867PHQ4yp1UqlblDSe2E
      YZgr/uiguJKcgN/6CCAl0iv/GQQ7KSxV1ryrK2N6zRydQNBm6OMqMolmASmlen+cc8X6iQM2
      m000Go2ZttbW1nLnZIJgPtB6C7rdLlrl6oPlziGPSNnAcRw0m01UKhWrQlsGkRmbOvQuXryI
      MAxx9+5dVCoVbG1tTQmJbTAkjjiOg7V6E51whOVqADc+2dwgmDozgiBQm12v1zGZTHB0dKSU
      6TRN0Ww2M4PlUm8VfPvrgWSAtP4mILIvRhiGqFQqcwcpbxHzFF8pJdjkNWD4KgCAT3aQVh/J
      ba9oU8MwzKyacBp7NyGZLQI2DEN4nodaraY89UQA9vb2AEBVzIiiCJVKBWmaYjQaodFoKH9P
      GciyQGUq8CUPpt6OCUS98yi8bUy0FkIIJZFQf7VaDdeuXUO328Urr7yC9fX1WR2AQLGHYycD
      xeiYOoDJughLdQdaWSBFJ4oia+gDiRKNRsMqhuiKtAlZJlDOBNz7vwVAIt34AFK52JgBeyjD
      WYG8r1kIkAeMTbm0adpeXl5Wh4LWqSxHsMUmEXE7rXWtSJdcXl7ONX7Y2h2PxxgMBhBCoNls
      zog65rNJkuDevXvzHIBzjr5McGvcw1PtTWWtyRqwjbIuevjLTNJxHNTrdfT7fdTr9Tn7eVFe
      s82sKRmDWP/g9EAkAru7d8E5x9LSEhhjM3qL4ziqxilRJdqgRczDi8KiCCWlRL1eV2IjrRXN
      gbhEWUsQMK3g0Gw2Z+ZpO8iErGQO1fUC870s4Jyj3W4vND46/L1eD4wxLC0toVqt5pqJPc/D
      pUuXpgkxOhVzHAe/fOvPsTcZ4m7YxwfXH85EgCzbuClD66ZO/b2syeT93mg0rPEpHkbg41tI
      ag8jFvkh0WZfRBGJovV6PbiuOxOcNxwOkaYp6vW6CqZaX1+fm+d5wKI+B3qW3iPuoZtAyUpC
      3y3CVVaDCGz8GlDZgrmSNrncrANVpFPR2MnKY+p6tn4IyBLU7/cV8pdV9BljcOv1+owCKaVE
      26tifzJEy6vMhQKYB8q05dvAtK3bBqJ/LqKqlUplBglc14Vz6/8Ehq/CW3k70vVvnPEYmoiX
      tTgbGxszYyarE1mgXNdVVh6Sr/PaOy1kOW5IvMwDNzkA3/m3QPAQ4o2vAy3jaRGVx0dId/5v
      pACcK98C6a8X6la6tcv8zQTP5UjCA7hegGZrS1kOSRwmZyhJFfpeJkmCfr+vpBTaIz3ys0gs
      daMoUhhLHX/T1mPopw+h5XgQ6WxWj03U4Bzwxy8jrVxGLOdZV9nDT/3kmcVoDHqkopQS4Mf9
      cjv1oHZ9HoFH+4grlyDECUJkhVIzxuYoUl5yyHlAEcHIegcAeO+5qVUtfA3O+ruRoDrz+8LA
      HYBxABJgbi4xzAL9EJrIk4QHmPTvAYyj3lpX6Y2TyUQdaDr8ZFWjM6ufXYJer6eIdqVSQbPZ
      nEGgubENBgNJHlf9kBMUiSScczR3PwL/5r9E2ngS/ad/buG6kWZ8OVG6or7DMFRm16VGFTza
      Q+JtIEntXlqXA7UX/h7YeAfJ1R/EqP0XZn6fR2x7tbUHefhpXqaIZx6irHVx0y74a78G1K8i
      WX23QnITFhGBeDqEECngLVn7Lton81kCxhi4HCM8vAG30kS1/RAiLeQmCAJVqIFMvKTklgGH
      c8i4AxGHaG08gqDeVPtJRhW3DFstosgsHR3/Hc5RhbKWAc4kqrd/Fqz/AuKH/yaiytXCnNJa
      rYZarYbRaIREcMDdVBwroycVO8TScKZWZ56N2Xboy8qop4Ei02Ke+TdxWmCXv2/qACtZYrII
      hFNHb9jDklGthpRPXfzI0/OSJFFWKIJxzBFsvBlCSEwMx95kMlGEOQxDBEGwECfjTGDYvQtA
      YtAJ4FemRCVNU1Xq3U3SFJ/q3UPb8XHFPUkr1Clf3uZKKTG6+IOoNJ9EUn8iMwqzSPFlIgQ7
      +BiYiOB0Pw1sXC1EPGo/i5qZekCUSPDHfxLO+A6ixlty29T/2sb7IBGgDOQhAXHSMu8uAqZo
      lqYpDg4OkKYpWq0WAMwYE6jyM8V1Uaptt9vF1taWeiZJ7CE2erBdEAQYjUZznDEPBDi8Whtp
      HIJ7DRweHirpgs6G++93XsT3P/8bWHIr+OOv/F6sOn4uFtsWJZE+kua7AEwvHMhDAIelYEkf
      0ltBotmRE1aFe/l7wAcvI159r3qX/maNhUIw9PHmId2ErwHBGiAAx8EMoutz0sefBw+CM+Rx
      IxPy9kg3e54V9AQpIjhkmgagYvHp0FNhBf09utdBD3QrIoz6ZwrNB6AMEXnvp6mA27gIjzHE
      SQJgniPO+AGSJEF6rFzqkYRZSqU+ONsmzdvqGeTtfwcxOQRffyfkMccAAMkYwuX3YRJ8LXzm
      AznZaDqQjVoHU2a3jessUKQH2NZGt5YVQRkkKiJOFHFrgqlLlF2LSqWC0Wg0Y/0ih5U5Liml
      ssPr1jSbdWgRkYbKLtIcRqMRpJQK0WxtZVUhoTbcb7n8BDaqdbQdH+vu1GJAptGsokZ5Vgp9
      USkpmgZRrfjg4jgkQMRzWjyFsa6srKj/Fy2S7/sqoyiLjeqbbhNv9LmUtWz4k5tgSQ9R4ylI
      WT4kowx3MWPp8zihbeyMMXX4dR3HPPBF3+m/ZUUCm6KYDcltB5/s91kFD4qshlJKJQ7FcYx+
      v6/yVig6NAtIbPY8DywMQ9nv92diVciLCGDuUjRqIGvz9FIUFIvhug4q3T8BG99FuvZuiGiA
      pHIBSTrfnhDT2yApkKuITdLimrc56sq9iQC2sZdRhglc0UXl+b8FiDGSR/82Js23z7VTBHlr
      mBf+TVAGSc24JJuVK6sdk4NSucM8D62uM+r7aSK9lNNLLGxzLBK/zXUzzwdjbCZagL4jUyid
      Z9/3p6HqtBBmJxQ8pXMBE5Mpn5M6ok50NglMTXPOF/85mIwBt4Fx+y8qa415CDjnaDQaCgmK
      NloIgVqtBiEERqMRlpaW5hbE7COvFEcWt5t5lrkA96YWJT6PeGUO53mIYWWeMTmE+Ts5jEzE
      1Q8z1dgxRc2s/gBADm8jHb0Gt/0mCGc2joiun82TIrKgjFGmXq8rhZlyTXzfV3oKANW/K+Vs
      sBUNqtPpqDBU8rRRNKYu4uQtirIW8ACy/ggwvoM0eFjTCeYRbxG5lGAymSjW1+v1ZuJWqL0i
      apg1dtuYElYH3vxPwNIhEn8bWECOpTbzYBEbfR4QgcobB+8+h/TgT+GsvQNi6emZ3wgJ6E6v
      ssA5R3j0AiBiMKcKvvz0HFGianNZYlUZ7p/1OxFw6sN1XbRaLasu5pIpSh88HXiSx827fomC
      kk3XRmX0wSXSQfjYT4JDIEr5zIGyUSdSbMpArVbDZDJRIpMpz9oWR0cOnfLZqjNkKYwxa0A6
      dbCS1S0WgUUUwzwgC5ktFJvWSgxuACKG6N8Aa73FKq5QqiKVHCkCIQT81qNIhnfhNC5DGPOp
      VCrqjoCy+o0ORYgBQIXzA5ipLGgSl5lL8ugzYTtlNOkd2kSEMmwsSXGsLGYrzrqoRdWqbWBi
      MsWP6JTDhghlDlaWBck277Jt2vrQ55HFEc8Diio/8/V3QnZfAGs9OXdQ9edarRZ6vV4pBAAA
      1nwYXvPhhfwReUhQRDBN8H0f4/EY7XZ75ixZUyL1DeCcI5IClaAGJuTchcZZg7cNRpcjbc/Z
      JkFUucgqYxPbAKiQ6SJ51fauPq4y+kHR90VQhpKdBcyylba+hL8OrK9byNIsgupiZBmwHVQO
      ASlTSOZlztsc54xeIbNzI/R3OD+5d5jyWaIomtNNpZRTEUg/4MM0xksH9+ByjqfWL556g2xK
      VR7Q7zRoHfIUS9shIvmPkqfLtDMajZTCT4uexU30+qX02dyAuhdBMA+jyexhsBUEM/uYTCYL
      eTx1oMoJ7XZ7ptwNXYVaZF0yIcsUXgRz1B0Cg/svQooE9bVHc98rI1Lq58tce2pjZWVFmcmz
      Mstc8yaXVB5n9J+ROumUxxyk7Tn6nKapsumb+oUNsrjDZDIpFQ5Lv9P9AqeZ1xwCxrfBXv45
      OG4DjUd+FAnsmU1ZB6usKTUL0jTF0dERgBM/CSmzcRyj1WotZGyg586WACQhj88WhCjkJnnj
      s4lJ9Jf+eZ6HRqOhJBib6JYkCVzKeqLNWPIquL66BZc74BI47VYsohjSs+PxWHmfF1Us9QWl
      cOUwDFV2lA0RpZxWxSbTqS6GZW1Q0biklNMKFzIBkiGYjMB4+ewmamORA2qOj0qEU30eSuLR
      E2QWbfuPujv4By9/DN++/Sb8yMW3LjwuCQeNtcchRQzHbyIeHmY+2+/3MR6PVclDIQQqlYqK
      CCXrERlvSMxRWWAiAlKBOJ56r5vN5tx8yenqmlRICommV5npwAQbC8/6zfw97zkhxIy5bVEK
      oIPjOKpiBbF9urlQz/JaWVlBv9+fQRCb8y8LbIgVBW+Cf+U7AbeJ1Fk6dzNpEVA+bb1eV2md
      QDZnYYyBxUeAU4Ng9nyOf73zOTzX38PuZIS/fvnZ03EppwLmVJAcZ9YNBgO4rjtnYtXvqyAT
      N12HGscxer2eKpUDQEkM1WoVEBMM9z4PAGhsvAmOZ7dcSTl1xs1ZgWihFmVzplVEFz1sdl1z
      k8npZms3y8pE8mmWR5McPIeHh4o6EDUgH0aapqjVahgOhwCgNmQymcwRAJuCpv8lqi0kMK4+
      MVUcc9YxSzzMW6cioLIf1WpV5S8nSaJqE0kp0Ww2Z+Ks2OhVpDu/CTgBnIe+E4LNxj1LKfHD
      l5/BQRzi27aun1lEA6br3Gg0EEWRclrRXBuNhqokwhhTv9N+kAgXhuFMGXQAMFcrKz2S5jAT
      MKFr+6b5k4AaG41GKutePxg2VmOCbUCcc8RxPOchtB1sug6J2H0Yhmg0GsoZprcfBMFMfUga
      j+791J17xBptUIbz5H2f96w5X7VBrgNXjiB4PbM4lQ4UrXlwcADOuVpPaq/b7aJSqahMuqnI
      cOwnkCmyhN63NzfwC2/64Eyxs9OCPmei7HrlCRJxaM/Ioue6rjrQRMzm2uVVNDauT9tnXqYo
      S7qvax7QvTjEZw9fw8PNFTxUnQ8rAKCSFA4ODmYqJZCVgVgYXb9aBqgaQ6/XU7HlWQtNNXFI
      JqzVajg6OlJ+C31hTE5URqHOu8dsUSgjy2eNizEGf/+jwP4fga9+FeKNDxUevo2NDXDOVY1+
      GgMdHKrhOTPG+iNwLlYAt2EVgQj066vOAjbOp+d5l7EYmmtKhcKmxXmPy8kcGzdMSNNUOeJm
      EIBzji90DnAUhXixu4eHg7bV3OS6rnKKVKtV7O/vz1SQFkIU3q9lLghNSK8varMCMcawurqK
      8XisCsWSo2M8Hs/Zes0+suzM+r+yoHOT01tHTsZhbiznHAh3ppQ53CnVhx6rr7dNMjUpjDP7
      CgZZu3zqsZ8WdAQlBZ0S4ckiaIM5E+vx/01TZ9a911SXFjgOhSAQQuD60hpikeJaYyVzAK7r
      zhRVunjxorIyEBsz5dg8BxM9T+KXXl8TOKmqpos91I9eLLbsxXImRzBleVsUaR6ch0xsgzRN
      kW5/M5z+cxBLT5+5H8qEWuQy9AcN+jkhrk4VoFut1hwBLiIAulk/K5xGn79rNtjmPt61djU3
      /lt3ntkOpf6sxyao7P4qZGUT4fJfsBpEdLmXKIHDAf/Wz4D3X0R07Ucx9hajUCa1NHUUXS4u
      sjad1SpTBmxUTUqJiDXA219jVbhPA1kBaLljEyFk1AfniznRykCeg3NRGI/Hc3uapQAT4Zsh
      BfRwXhn0shtAz/ndT8C59xuQzIG/9CwmfDn3PWrbkSH4/sfBZAS392dga1cK3zP7zzO/mnb/
      rGfOevgXQSLTama+d9bDD0A5GstefcUZML73CcgkRHX5CQDFIeqLgt4ecXLiBjpkHWqdc+tt
      ZXEAXbKxIkAZKKtcpvXrcLwVyNoFSH8ZKEhRpZtpUh4gvUI5wu9ZSMbOWiAac5GZ1yaPnwVM
      cbBsu+dF9c2xkMm5jEglAYAdF5jlrqoCoa+PrquZFsGyz5HJU8ppZb7t7e3S/iMbUMaXDfS7
      Ktjdu3cldWQLB86CshtJ2jnFpZC93QZSyplkCV1pPc2YTDEti1JwztHv92fiZPLmRu2SQ43E
      Cr1NQmTz+zLrNhgMVML3oop5WbCNOQs4UshkhMGEZxoZzgr6WKj6Ne2HbQ3yfEaMTRNgGo3G
      HBeQUmJvbw+dTme6d1mDOS8gU2WZ8uD6JE8zBlqAvFS/LOq/iPOJMYb9/X3VHjl0AGA4HCpH
      FHmYKZtqERPiWQ++zu1sQPctZEX76iDgAG4TybD8LTeLgs4linJBGGMq1qndbs9xmCRJ0O12
      EYahMgvroCdFWR1hRZ3bWHoZ+3oZyNM99L5N2TjPzc85g9/5BPjkPibrH0Jix/tSB85lCdzO
      x7FdW8P9aBtra2vY3d1VaZnkZWWMHbv4JTbFp+EMY0S1D0Bk9K2DHshnihP65zy0vQ8AACAA
      SURBVCwRw/dc+J2PQyYjYO3dCGO7M4hKlwAnOdWvh8JfBrL0IALdcDLjCWZMKcOj0UhxYr3d
      lZUVNe8ZK1BZlvh6gY0iZ1FGW3olPecmh3Bv/AswmcD3lpC03m2Vq0shQPfTwO5H4TIPm4//
      HYzTaZ39LNNiJb6Dyu2fm/ZV3cak8WxhH5VKZeGw5Zkxpl2kvZenn6N7qAWP5D5PRWbJr0Jc
      lJyKi+hf5wU28zR9D5yEQ5hWLQr+o+gA2774vo/V1VUcHh6WIEeWgRGc98JkYXrWYthuY7GN
      SThNyOAhYHIfaXDtTGMXtUvgTg2obkPwCpy56BPjeX8NsroNiAhp5eLCPobTgHBb4O2nINMR
      ZFBsPiYTNuVQUB4F6Wx0xVWrUQFDArn4sbECcW6byEql6Sm0w7TaFXHIRqOh7grOAs559g0x
      HkIIXkWc5MvF56moMcYyy2XYns0qI25LxuFMgEEgEfPFtjif3m9W1pHm8um9ubllSGeelwDk
      tH6pNk79rw62G1kWhbNajvRDKaUEizuI7n8SjHuoXHg3JDsbEjDGVBVoqulvjpeK4Xqeh3q9
      jiiK5tbN9GzTeeScY319PRMB0jS1cwDOOSqDz4Dd/TU4zccgLny3spuam2Xa0cvauotMkGWA
      nHF5psIZy4JksF2ifRrQD3K55xmA4rU7T45w2vnZ/A6MMUDGgEwhUznNdTgjAgAn9vis2+jp
      UOfFZlEBN33/y1gNydc1c02q2ozxa9NJju7MRIaaCu9pqEzRs4u2ZZPhi5T5L4VMmwfnQTjO
      A/LEBVbdRGXjbQDzIHm5EilU4z/LZLm0tDRT29X8ncrw0D6bbYVhiDAMwdg0PsyMa8vLHyar
      nQvMY1289l54fhsieHgOO03zmmlj/1IeLJP6ExQhw5fS8pGXeZZn3XoQkEc4JABUt6YFB0pa
      c8fjMTqdDoCTGJ0gCBBFEba2tgAg01lF4yFrzWg0gud5M6ZkKpZrK4tJYe1UDc5UpMMwBHB8
      Q0ySJDMHeQIA3jNgCQOS+TqVptZN3wNQ8lhWzaA8b6CUEnEcYzQa5T5j+47s+7oN2VwUnaWb
      ivXredCKgDEG7+D3gKNPQ25/A+Lg8TcMx6LKz2X0NN38qOdelA3G04lqo9FQuQwEruuqOrI2
      48zOzg5c18XW1taMjjEajU7aqFQquTewmxTBPETUMd1XSyls5xE3vgikaYo0TedsvlkUTQ+I
      0muhvt6QSXUPPwXEXbDuZ8Hq1xcWDXWCZHMs5ZWHzAMqO1MG6AKTMtKBfpZs11UlSWJFnCyn
      Jl3rm6apKp5MvoFwPMa9UR+B58MlGd8EWhyKGdHNkTZ5lCo9fylFClu/+kV3JpRx/D1oyBqD
      3P5LYN3nINfetTD1v3HjhpKJKbSErnmlnA2SsYloPEiC1el0IKVEu93Ofc62DpFIcTQZYcmp
      LBSG4Xmemne1WkWSJBiNRuh0OujJBDv9I3DG4FIWVdZgBAPGEKiy+fow+oDPM4vqvMBxHCwt
      LWEymajqxrq4BDx4nSVPF8kiFlJKxI0nwBpPnmp8zWYTvV5POYqiKFLZcv1+X9nWqVZQo9GY
      k6PzCIPv+8d1Pz0UDU8vj5/FjbL645zji4f3MIgmaFcDPFbZWGg9qEjuYDBQhpxp8lQCZ8DR
      8CvTO8JsQIv3e/dvYH88xJetXsQV/yTZxbaZRYN70JYMnUPpugHlsdKm6zLg6wF5nIYxwBHD
      uZxf21qVXb+tjRVM/Q7OnN5EHlQ98NFUEPX+5sYLCTG8jUE0hBesoNq6kjkm6od8GmXqvRKR
      pUta6l4Fw2iCujeLoGVM77T/urgnpUTAXTyzdRkMbFoYK3MgkBjGESSAURpbTaDmgLIWI8tS
      VDYstwyQyKaPbTgcqkA0kgvp2QeFjKZtXxcfzfF6+x8F9v4QfPUrEW98/cw6ms66rH50cOQE
      4tYvA1LAvfxNSNlJTRyb8y3rcxaIJEQaDY8/Z1eeVs9rGWimx97UI01rpOd5uFRZxoVmGw7j
      wIIIoP8+5xcQEmCYT4rXIYkTvGvzGg7jEBf8BmRBBpU5uKyBEASDP4G/8/OILn43Ro2vymyP
      bLp5iTpZ4yBPI12jQ1xAr5ej93EeYB54Pc9Z79NxnJmcXyIG+nOmmdlGrWeQJh0CyfSAsmQA
      +MU1Unnah5wcgjeuQGKeShMll1KCewEqjakoQn9PAyaR0I0SjE3Lm1NNJwds5vDTe2X6LuJo
      7lEUou3XICw1cACgJoGLbgAY2JsHWZYjk/L7d34OTu85+GKMyVNfY9UjOOeo3f0I+P4fInno
      hxE23j73jN6PflhoUSkwihbNn7wKEY8QB9ch5IlXsN/vz2y2Pm76bNawMc26+jz1tmh8pvm1
      deGbwbufhVh6WvVPl0VntU/vxnGM5eXlWV3MW4Wz/T5Apkgr24A8qTUahuGMOTCKIgS1KsZ3
      /wQQMbw0Am9dV8XDlGIsxhj37sMPVgGvAa+xjfF4jFRy8DPYEOaoMuYRg0A3t+viWxHYCIcO
      7v6oj4rroWIJ6mKM4X46RiIFLnr1mXiLrIGaA8tiQUIIxNvfAZaOEV/4zkwlmnMOfvgnYOkI
      TvfPwJrvKCVm6RCGIZIkmXoe+zuQr/yvYBDwHvp+TCqPQMqT+6ayzLy6VSzvsgiTo2bFoivz
      K2PA8tcCAMoGgNJYCEl0kFIiqV07/s/0z+3bt3H9+nXcvn0ba2trODo6wpUrVxBFEXbu3MFD
      7TbS8QGYPy1Lc+fOHWxsbKhSKuP+PSTjHtJkjPram5SZcdH8BhpfGQjDUJVwMd/p9XoAUKoC
      eFF/bsOrosrduUuVpZToI8HP33oeEhLffeVpbB27wE1lJM9XkDeIYeu9GK+8b3ooMp5JkgTJ
      Qz8Mp/tpRBsfzp2QqWcQawWmZtBOpwMmHHA3AEQE6dTn3tfndRr2nqVQ6r/brGmnpWZlxqk/
      c3h4iJWVFXQ6HYzHY3DHAV/5Mhzt76K7M4SUA1y6dEmZjaWU8IMViHgMP1hT7fi+r5J/dBHP
      Nm9dJNStQrp5naJCyXJDYc7m2aIEKyDfqlQW3K2gOSf+qB8ZB2fTUn8ey659Yxto2bLaZcyn
      YfA0WP0tpTY673Mcx2CsCvfRHwNkgoTVlV5jvmNyk7L+Ahs3tLVjKrc6sma1m9d23tq0Wi28
      9NJLCIIAjLGZ2vlxHKM/GOKoO8Ty8jKGwyF2d3exvr6u3ud+C43N5Zmoy0qlgnv37mFra2um
      iiAdZn3cepVuzrkyw+oiK2PTRJZut4tqtTpjltXnplfxLlPholBct4VD04uMMYRMIpUCLWe+
      oJL5LGPs+ObvJPPa0gcFtAkkn9NGZOkVjuOoq6B0MPUI83eqWpwFeSZBUz8h5xT9vgh3k3Ia
      q0/OoSIuQkFlNn1CH7eulJpgHuzhcKgqOOvtnGXfqZa/nuWl909IRPqV/pvNiDEcDhXC0O9k
      AMnMCaaJMMZQZw7AnJkNzFNcCMiqYt4/8CBBSqnYokmJdGCMKe+gbhYtEl/K9G9TeMtyjzzI
      NOdpfeeBfkmEvjYmp7Zx7qw9bzQaODo6msnLLSvOZYHrupk53d1udyYJigobU1G28XiM1dXV
      OY4r5fTSR3q+0+lg+8IFCCngVqtVdTHzooqKDvqi0cZTip0+GP358wSTXeZRIsZObhk33y9z
      WLOsOrZ+bEhgUluTuNi4kk0csFWwNp8BpgdnNBphc3MT+/v7uHbtmkKImzdv4sqVK0oeJ88x
      lbrMWw86qHt7ezMikw0Jyp6tvP70daRcXyqUDEBdk2sLwpNyGijZ7XaxurqKG/0D9CbjKQIA
      sCKBrrwsAoxNg5dMBcXkIA+CM+RRfgLiSqftP0v2NuX6InCTA/A7vw40HkO68jWQmCcSeYhR
      qVSUl9V8Tj8sjuNgOBzO3Ovc6XSwt7en0h9feumlqcm5VsPa2pq1iG7WOaCa/XRH9KKEVD8T
      ZLK2vWuafM110jmR3jZj00R4tSaMod/fn4pRjuMoG3kekEhTtLmcczSjP0e993uIo3GhXPsg
      oEypj6y+yXWeNW6bKdgUfcr0wxgD73wK6L8M3Pvtaa6t5fAWgT5OfeymQrq+vo6DgwNlvaH4
      ero9BgBWVlZw/dGrWJI3IYe31Pv0j9bV7Md1XTSbTRwcHMyIQll6Rh5Uq1WreTdvTWzWMfM3
      vQ29LRc4qSlvekezOssKX5BSoir2UH/hbwEyBt70jzBcetfMM+bh0mVwG3JlhcEWgW2x9Ypo
      ekCYflkEvWtyPxt1t+lENuqXRbXE0jPgg1eB5uNI5WwOrglZ4qPDJBgiCGSXNanX66qgMa3/
      1atXFfWP4xhPP/301IDRv4lksAMM76EaXECK2T3JmtdgMDWf6sqojTvawLTyTEuczxobFiUO
      1Cad0xuTHn7gz/8DHgna+Jk3fx0eW9lEbxKeZISVYVsmdtsUI+EEkF4bLOlDeCuFA+33+0ok
      YWyazU9x25VKRcmqZBoDAIelqO7/JqTXwrj1tep+2zyZH5g6UOr1OnZ3d7G2tqYojed56k4C
      cx2yFH6zfX3B9TbyNmvM1+Bd+2u5Y8/qhzGGiu9C3v11iPE+nAvvh6jZ66eS0g/Ml0+XUirl
      2HEcML6JZLgDp7oKyZxM/4w5Zqrvb0uUsXHFPBG0Wq0iDEMVx18Epk5G666v/x907uCFwQFe
      Hh5hZzzAZa+OoNa0W4FMhMhjLeYkYjTQfeoj8HiCyFmbWUD9cBA4jgPP82bCAOI4Vrmeruuq
      EF5ajErvT+Hc+UVIMHhPPY6Js1G4SHQIOp0OWq2WupqH5Eobq7RZQ+ig+MkupAwQsZMIWdv6
      0EV1QRCoGv16wB5x3fF4bL2l0tY/vet7DuTkEJAJMDkEMhCgCGaQnTfgb7/nWPzJPvzESekv
      XcU0EgnCSYT1oDkzZr2vrMOvI3itVkMURXNIYJ5Hsy19LroB5pvWHsVnLtzHtVoLl7z6CaKM
      x2Pp+z46nY7Kk7QVmdI3zZQBdaAbuk8jtpgUzvYZACrJa/A//98Bbgvh9b+PRE6tTULYr8Ok
      NsxFKgJTtmeMYTKZoC1egfv5/x5w6xi/+acQyZr1oALTZJDV1VXcvXtXRUYyxhBFkbrHy/d9
      dWnD5uZmpp5lft/v99HyB8BkH7L5BAQcK7E6i8JvA1oH0iPoPi/JGD57/zaElLjaXsV2Y6qU
      kuf2NOPQfR2Lwng8VgSWwByDOqV5LmVTHtb1AHNCnE9v9jur3J4nP07cbaRP/c+QkiERDFlS
      hs3iZLabWwnB4ArqfTEGIAGRgMl8P0etVkO/30etVpvRO+iCvrZ4Gfz+R5GsfA0O2PXc8Zhx
      7QCQeJuAt3kc95OtO9hE1rOAbT0dzhB4PkZxhKrjzdTxMZ/Na9McNx1kKjZcBDTXarWKXq+n
      EMCmtyodwPd9VY0rb3AcKVj4KkT1AiSbvzg5iiLUarXSidNZUCQ/xylFbC7Wpu2zDjYzpAnj
      +jOoPPYTkF4LMW+pmyBtFM6UYfX14pyD3/ozIO7A7X0Gqw+/s9B6lcVp8hRoc95kDMirSGF7
      V/+uWq0qj60SbSXw+Mom0lTAO/5+kUNPBImsT4wxtX7dJIIYx1iv1hdCZKrTmiWiKjJdqVTU
      JXV5HfDd/wDs/zGc+jXIh37ISmHJntzv90tF7Jlgih6LvDcz1mOxTbf727yMeWY02/xSAYyq
      T07fsZT2y0Ne/TkhBOTm+8AO/hhy5StKJwbp87CNPQ/RpZT4whe+gGvXruHw8FBR1TiOUa/X
      MZlMMJlMcPny5dxzkLWWMhUQSQJkHLy89voywd978Q/xle0L+P7NJ1QfMQNePZhW4666Hpa8
      E6KSZY0EoHQukwvqhEORAFISl5aWFjp0NlsvddJsNtVtfOcNul5ia9/hErUbP4XaZ38Y1ejG
      zAE2F8E2D3rW/H/WfM2xlYWJdwnppe8CcwNwtlhedZ5dPEuxZ4xhc3MTvV5PFeGl5HEyOZ/m
      GiWi2rb3OOe4d+/eNCG911OGjtFohDiOlf72+507+NXdz+O//cLHZ61UjKPqevAdB9XjsZEe
      mrc2dJWvOS59rHM3xNALekLGzIubHwJrPgFZu5grLtHi1+t1FTRVNnS1rK1X78+0LnARTkuK
      iAhO/3PA8tWF2s87AKbYQezahlhFwBiD/9q/Bb/7q3CX34Hw2o8tRDXLtK9zU8dxsLq6Ovec
      6fktIy4uMiYqWU57RGHNusjztvoK3rt6BV/VvjhbkE1KPNJYmeZ2CwFp0XVofgR0+E0ioI/P
      GgzHGFPVuygWRDcJCuaABdfAw1fh+ptIWHHdl3q9rq7WOe8bCrOU3IQHSK/+FbDRDUQr753T
      D23UHcgO49bXIUvcWOTgz7Qd7YNBAJP7pcUGfb554laRaFbEEct61E0Oq78nhFCV4PRnqUgW
      5xzj8Rgtt4pfevob5qi7lBLRZIJKyTunGWPo9/torK+im0ZouZUZc7yUEoPBYGoCH4/H0uZs
      GAwGGI1GKo+Wwo2FEHD3PwrsfhSobiF55G/OxYNnUUG6+CGvHN5pQEqpIjvpjllT7isba190
      AMlDaR7A0x5+APAQwut+CmnzzYjd9eIXjoFMhEX9k8XOFjJctGdFCGASDNK3aI9txKQMmHU+
      0zTFeDwuFbYThiHGIsXvH91GIgXevfUwNrzaTOor1UTKtLnVajV46T7iz/8rTF79FYg0ygxt
      1uVL/cCZz1J1rsmkuJrAImCTdQnyFGrTv0HP6658MzbIJm4RFMVJZW1cwgKMl9+z0OHXIVf+
      ju4jfeXngHu/BceSwGtyeL1NElGKwLbmi44/S+Sidh3HQRAE6Ha7hTdcHh4ezjgVhZjeDD+Z
      TGYuePd9PzsfgDEGMdyZpg6OXgNEBGCa5JKsvntqBapsWQ9X3gJUKhVVQvG8qpHpY8hTUs3N
      Nm3qhBCu62YiaZaybOMcZr8ui8FkiJgtnYthoJQuM9oB0jHk8Da4jCGZn0kQdNHk6OhIxc/r
      HK8ITDGryLig74X+fxswNo34pDAJ4vYmBEEAnqT4uouPIRICy+5sSA2B53n5CFDbfBZhPACr
      roJ5daTxlAOkkkFUHgLnHINjdkJx5CTPmXdOkYWhGt8EZIyRdw1hGFrd/4uCjSrbDqXtPgH6
      TDbnJElmKEzW89SHPgbbdyf25giNP/+rYKObGD/5TzAK8q9KsiGuDjZ9xAas9QR4MgKrbUAw
      +62VtgPpOI7yF5RVtgF7nScbcVxU19HbqNVqysFl09XIaeYDCJxpGzYnGmOsAAEaq+DXPjQt
      hpqcaOX6ZpNL/+bNm6r2Y7/fRxiGSNMUQRAoT+hGfYjgs98HQIA9/TOQ/uNnvg3FJr/aDqM5
      N/N9/fm8w2VuiCka2foAACZGYKNXwcQYPLwBBM/OvGuKYkVQVu8QrAqsfTWElDP5z7Yx699T
      eIM+xzJjonUrY0ww55E3Hl00BaCMKfoakGShI0aeZCJlwWVPjDFlEzYD2agx151entxutxEE
      AaScegnH47FyiKkBeS5kZQuQMYQ3vamv2WxiMBigVqudqjCVSaGL5FEbJaXvTMpvo1Z5+gYw
      Xy5etc1aGLz918DjQ0z8q8oqYXKqrHmYYEPyPM5UBszDuOj71EaR0cHsS1+zsv1RSf/JZALp
      Ovil115AJAW+69KbUT2+vaaMAl5ok6RDqnuIdTlad5zpnVGgF7EfYGqaHDz7i4CUiMWJo4NK
      Yfi+fyYzKcX2E7XImzyN2SwUlZVcDUw3iuJSqA1bhKuNe0gpkfAqJLaB4xgZU1zTx2auNeUw
      6GMnakffmW2eBkzup/s4zN9NPYoOZFZAIo2raF9sv5vr02w2sbu7iyAIMHY97E6m1fD2ohCN
      SrnoA8ZYthlUB8oGokvLrA2RDIgU/qv/EogPET30NxAdK3wmm7dNkurMnAYJSHYvq1jrMitj
      TDlesg4jjbdMjFMZ2dx8Xh+TOU4pp6Y7KmxrHvIirpcHNpHENray7VAgpBmBWba9LAQxS6sA
      03PZ7XbRarfxJ527iKXAO1cuwWP2+x5s61vqpFHglOM4GI1GM3Uc9UkxxsAn98AOPgYGCbf/
      HOLW185MLO9g6A6z0/gK9DIjNsgSY+jdrGf07ykAzHzfdijzwBbZaeM8pNSREeG0lD0L9DFk
      6VO2A2wTJQFYryMqq0RnKch06G174jjTpJ2vaG1PvxQSKVJVuc58R9dNCnUAEyi5g8BmVUkr
      F+BsfhAsOkTaettMwdcyUK1W1S0ziyJBmT5MJMzanDLfmwdYH4ONQJhjNCm4bfxetAN28yNo
      BVcR174TaTpvNiyat041s+Zj67/s4dXbkVLOVaqw6WF5Boes5/Ux3r9/fxpO3m7Pce/BYIB6
      va7EdhJrf298H3/n5T/At249jp/ceGaq45aa3TFQ0JJ+6E05VoJhcun7TwaNbGdLFlAqpA0J
      OANccYSUt4+vPl0cFhVRst7Lm4/N4pAn/mWNhw2/OK323H8ZSMdIU3dhBBiPx9YqD+ZYi+am
      KKdznFZpTIPEXLq6NO/g2+Zg+44xphTeKIqwtLSk9DWKaTIRjqqB64k0nHP8/u5/QjeZ4Nfv
      fwH/+LF3T7lq7soZQLK5ybIJy2xWBJq4jgA2VmtCpVJR8Ui6ole/9xF4t34WyeaHMXjoJxR2
      F7VH758W9LGXOXS6PVynwItQVQBI22+HE/cgaxcBN4B/ilKYZW/v0Q9i1uGPmMTv7HweEhLv
      234UNTZb2Y5zPrXBHyvCZjU5erYMmOeJMssODw/Rbrfn9D193FTXiCCSAhu8gqeDVfzQ1WfV
      eV0IAcgjSPm7+oLpE7PJh4tOHoBKFYyiSHn9+OBFMBnDGbyAMAzVnVd6zcg8OAsSnBbyxKEi
      xE1ZDWLzLyEMQ1S1pTutspoHZfZonCYI0+nBGqUxaq4z94556M3zkfWcqZvpXISKXgHTc2Ez
      RNjap3L2IZdwJMP7l6/gmcZJyMlCCMAYU4eM5Kss8SaPnZah1gSEBORdDq/9OCrNJxEvvxtp
      nKoiSovoGaeBogN2GgpvjtfkonrfNu/qotxkUbAhbsv18VUbVyGlxKpXU/4MneOZTrCs/Tf1
      J/13M9dDJ7wk45tjtY2dCoExKfHNW49jJBJsxAy9Xm8a2LnoojDGlKOLisuWPdBZzxVRHh0J
      UF1BtPE9AIAk7M3U+XmQYCpuJmRRuSIwa+hkEREbspwVpJQ4OjpShYyllCrakqpVRFE0Y4VK
      ogQXK8fV37SxmhzARACzX9uc9LmaxpVmc3rVU6/XK5VlSE5NqoANANuehySd5pCH4zC/OG4e
      MDat30PZPbbJ6NTDj24DSR+T6ptUDR/z2SKgiehxRq7rnstBWASyNs2mF5SJo8kSH7OUxTJj
      KQtUpSKKIhwcHGB5eVkRNSo42+l0pgc/SaaxX4MBrly5Yo2ipTElFRcDmaLB3bnwC/15G/HM
      4oCMTZ2O/X4f29vbc/1mrTMhtF6GXn/21AjgeR7a7TYGg8HUHa0tgL5pbrKP2me+D0hDsDf/
      NEb1d5ymSwBQBZwICQgpFjWXSinh8QRMTJDw5qnECNsGlrHumBtgO9RmDA6JQOaznDM4SQfS
      bSCV2VuZNT8yatTrdaVQ1mo1HB4eApiud6PRUIFkhBQ2bkh/hzLB77z2CiQkPnDhcTR5fun0
      PF1GV6yllLh//766Gb5ofiYimfqqWgPrypQAxqZxQrVaTYUOm0ggZVby2umBHC2EBFSbpixI
      KeHyBPLW/wWZhvAufj0ib3uK1OkhwBxEzF4Y1rRkUXv0uwm+6MDtfwbx0tsRs9kitra29fay
      +tff5f0XkN7/GJi/DH7l23MLWWUBeZfJakNiEHnV6cADU4So1Wozc/Z9X93IPm0gm0PSO+a8
      zN/NtZVSIpQpfjs9wOpghA9WrynxK2+99M9ZIuyZ8xNd10VQ4cCtX4J06xivff0MB0jdNYTP
      fARI+ohqT8xctpcFNgVJ/0zyPhXyKguKaksBKY9d5WIqH1YmryB4/ocB5mHwzC8g4suZY6O/
      NjGFgHMO/4v/C3j/BfDl55E+9F9YkSZPJ8oDxpgauxQxeA6p0Q+ZTWzRQUqpQhmKkJw4sG5m
      bXAX799+FIwzNJhrXSObblNk1fpPvV18/PAOOBje0d7GqlP+AhZq+/nwEEfxGO9qXwRdynxm
      BHAcB+zwU+Cv/TtIAN7SWzFxL6jf0zSF8C4BXr5HUAedwmYdBqr4RWXdbZAlZ8bSh3/pG4E0
      ROxNk3p4fASkIYAQPO0DGQhgO+yZUNmA7L8EWVnPna8OeW3Tb8rK0noKjt+G9FeQimwFGrCX
      pcyDPIpMYLu2VggBPo5Qr9dnQmbogr4wDFGtVqcKqO/jnhij6fpYkg4Gg4GKBdPj96WUuF5f
      wcVqE+uVAA05DckhcdHkIlRmUv/+0EnxjZ/+ZbiM4aefeB/e19iGFAuGQmQBb12HrGwAbgOp
      tw7IeVmOwCab5UHe72WD5mgTqFKA53kIJw243jR/gXOGaOkdYE/8DwCvzoQrm5BnmaFyH3ST
      ZHT1r8K58C1IvA30Oj1VIYMK8QKY0WHy5mpSyql4ySGqV07+n0E0FkJaS7+6XqKD7mgyx6B/
      puSVbreLpaUl9Pt9+L6Pz8cd/NH+LTiM4YeuPotOp4NarYYgCJTfR0qJW7duYXV1Ff/1Y+8E
      cFyas6CiHyEZQZhO0HB9fHljE//PvS/gwtUGnglWzwcBvKUr6D39T5Wi5LIY7uBzELWrc6LE
      VKlhcJIjSHcJkpXLOMoC8hjbQnBNZOt2uxgOp2GzdLsIhW0LIVCrPYVBd4BL9dONJ0kSdLtd
      lUdcq9UQxwmCoKMsWEII7O3tKdlbL0vvOI5VycuaT1kgJfospuIylx5mIWCz2VRmTAAnV9IO
      76tnXNfFlStXZsRfQjy6x6Bsgo7+HPW56lTwO+/4DvzUK5/EINHyPsqEJWlB2AAAIABJREFU
      QxeBlNML21SZ87u/Bux/HPBXED/647M1XhhDpfsJ4LXfBBoPI77yA5muelNx0ZVQHcpklUk5
      vTU+SRJUq1V1ICnCknwNUsoZCm1CXhonVaYgqxjJ0b7vq5By13VV7gMdesoxoGtCbeswGo1m
      frNx2CwLi+4RHY/HSrk9i/Ur6/8A1A3vJtfQzcJSSjDHwZ1ogIbjY82bzzsmfwS1l9XnhEm8
      ODzE48EyauAze2RyzsN0gm4ywUOVJUCekwjEGFObI6VE/2AZEhzwV+YWmjEGTPYAmQLRUWHb
      +qLpSKAvbhAEhXH6xBYJXNediyXR41eyrBV5FJiqqmURFJoL/U5tmRdBZPWTJePbdAvdbEr7
      Q6Hm4/FYXY5RRNVPA7bxmOZxKSVkmuKiU8v0l5B/guz+NkTnnOMXdp7Hpzv38NTSOv765Wdm
      RB9TCV/mPpZ9f3otPFswFqho0vS3fvVDmKy8BW5tFa4foNfrKXnRG9+Ad/83ICWQPPaf51om
      zMNgWhLo/2EY5mYhZUFe+EIWNbVtwmmVS9tvtt/p+7x38xRs+p4qpaVpin6/D8YYgloNDkuQ
      wkUYjjOJSJYlycaVTWKh6xC2cerGCr2NL37xi3j88cdzFXEpJarHvoYqdwsL8prreq5l2kjM
      cBwHTrAF/zghod1uq3TDpHMDLBkAzAG4P4OtNhmvaONJ4z9NPvGiczPHmTWmMlD0nu1AZP2m
      P2Oz3pig3wsX9e8gHB3CD1aQyiVVs5NCihlj6lJt8+5e2htKFa3X65l7NUP5MxBAf67X6+Hy
      5cszekvWu9+1/QTetXoZF/w6kugkLdZmDDDfP986hTjJsdUzgxhjKt5k1H4aEgyQKfjoBuTS
      mnrX3EAatD4B8zmqXVM2JMLWbpENOuu7RZVScy55XKVM/1yMgfFrQO0SBPMKn7ceTnGcTCIE
      mktNdLtdNBoNTCYTDAYDJEmi5Gmq70o3QlKhM8amoQZ7e3tYW1ub65f6zBO39LB2qihCyKc7
      OukeaEC7P04IXPanV2vZbpnUzcfUF8G5IkDRYWCMgVdXILw2kA4Bf2rxyFLodJlf/92cXFkZ
      1nUYqvd/BZApwo1vQyqyKeyDBnMeLpcAE0iE3VJjzpkxBnHvtyFHd8GXrgMb7ylEJBuiV1qX
      4QUr4F4dQkIZAIIgUNc6kTc4TacV1szLqAl838fe3h6iKMLFixdzxdu8dRmPx+h2u1NTchSp
      6E+K8ZdymhBDN1yShUvKqRWy2WzOrK+UEsx18L/f/Rw68QR/+dJTaB5Xjjh3DlAE1eYmxu/4
      Z0AyRnXpEtxjSkMD1UHKqVeSQh6yasGXWVjGGLzhn6Pyyv8IABDBIwjrX5ZJ2W3jsUGWrmCz
      n2eJcy6LUXvpvwHiI0SP/1eYuBfL9cmP9R4+67VdhFsJyQC3gawoCt1HwTnPjcR0XRebm5sA
      pimLANQF2ousJTk5Kd2R6ktNJhMEQTBD5clMGsexuoXH1tdeHOKTR3chAbwwPMSXN6b3yj1Q
      BLDJYUII+MGaYmPksRsMBnMDJ+sA5xytVkvdKEkwGAwUtpeBtHIJonoJkClE7Uom98ijWjZu
      lfVekShFzztJBxjdAoOAE94CmvMIYCK/EALO1vuB+BDSX4NM823kp9VVyoI537W1NWVWzhuX
      Pj76R2VySCGnw07itW4100UizvnMfRQ6Idtwa3jv2lV04gmebqyp7193DmC7PZ6cUaPRSA2M
      fmOMqarAruvOuN9J9iyT8ielRMRaEM/84pSd50RP6mMzD07epRxFbWW9E7sbcK79CFh8hMnS
      O1AmgpAxBgEGeGuQYjHRx4Q8IwMARVWLKmzbxpClsGeNj9bJDHDMU+h10PdnxnokBL5t47EZ
      rvzAESDL1GeXHz3EYYyEeUjTWT2A4sBN+zxdgrbILYKJcI4P9ikmZIy/LBKYtYdMEFJitPTO
      4w7sbeRZhPJ0ojKHP+/5GAKvHu5jqVLDWtBcSAxN0xRRFM3kktssVebczMs0yoKOpIwx7Ozs
      oNFoqEtf6MZOql00mUxefw5AA9UnnaYpohf/Bfzd34Jz6bsQrnxATV5/Vk9qYJBo3flpON1P
      YfD4P8LEvXSmMSwKp3n3vP0FpgMpy/RYph8bcM7RH43QEg4wjiCqi+lglKdNCTVZHEQXf0gi
      6HQ6hXpN1nxIpAZOrkodDodwXReHh4cQQqiKhq87AlgVMSHAus+DiQi8/zl4mx9WZVEoTsdE
      iKXKGO1X/ycwMUFt998guvTjqr2ixTqLlSeLEudBVpJ4Eejztfk5yoo8jDGw+Gha6r6yAXqt
      zDotVwN0x/n1+LPA8zx8qr+LPz64jfesP4S31tdyE+HpOzK1ttttqzxvAq2PMotiasUiKxHp
      D3EcK8sS/fYl4QAmeJ6H+LEfhbj/h0g33qfS8OgiA4qupFgbABBpjOjSD8LpfhLx1rdab2os
      AnrGZQmc0RcgqpcRs3xx6qwm0kV9B3qfi5oVCYFcFmNy7z8CkKhsvAOpmx1wZ77PGVNVvxfV
      fVzXxecHB4hEis8PDvBsc2OOCxAn09u3lWXP6/v3unfwf+x8Dt+6+Tg+tPLQTJu6FYuuY3ou
      6eHXX/o0Prj5yBsDARhjCDbfimT1zej1egiCkzBbMoPV6/UZLT+OU4TX/yEAYG9vD3zcQ6vV
      UrJ22Y1ijMHd+x3g4I/h1C5AXPsbuUr1g7am5IEpQ5vjybRYMQfM8SFFcmI6xTxVNUVOmw/G
      hDzKHEUR/uLaQ3i+v4dnW1vWw2+bBwBsbGxgb29PmVGzgHOOj+6/ir1ohN89vIUPrz08YynU
      50J/P3G4g8N4jE8c7mRfkfR6A2MnKZY2GA6HM6IAUQohBNbX17GysoLBYICDgwNVZLd0+K9z
      HLzG54PYvpQH3gZCCLhyiErn4/DSA/W9LiKaMrM7vomG00Nt+8uROlM7vi5zm5dmn5XLEaRp
      ig2nig+sPoS1nAwumyJ+8+bNmdsss2J8hBD43otP4Z3Ll/C920/OlEm06Q5CCHzj1qN4trWF
      b9p67HzCoc8T0jRFp9OZS7Yg2ZCoEuWs2mTINE1xdDSNNKUEizwlzOEMbryL1FtDIvJpgl6V
      oggYY6hEt8HDmxjW34ZJPBsSYEa6ZllJVFuVyjTV8u6/AbrPzV1SaAPXAWrP/TWwpI90+xsx
      2vyOOSpPUCSfm1CknCZJosLPi94xq/u99tpr2NzcLG2s4Jyj3++rOyp0MDkZIfyp6gI9aHAc
      B61WC51OZ4aVkYlLp1qTyWTuMFIySrvdVpd37O/vg3OORqMBz/PmLvtLhUTqbAALVljhnCOO
      48xL24KqA+/z/xAs6aFx6bvAVj9sbWOR0i5SSqB2Aeh9bhoDlBP9yBiDBCDr14DeixC1K3Mi
      TZa1See2WeMr4hS2u9aK/AVSSuzs7GB7e3vuspE8yEv4yeIcwJcgFKIMZMWH64FXVKGgUqmo
      G8dNqkYJKMvLy0p/6PV6cF1XFVktWzeTwKQkg8EAq6ur1oPEkQL+KmQ6hKysWRW5ResaSSkR
      tb8aTutZCJ4dBOhiDNb9/8DqVzB55O8CyQAJb4IhO6qSgNaYstv0S1Bsz+cB3buml3Y3kUCn
      /IPBAGtra6cSw8rupX4JyhsSAYCTu2FNMEUCCu3VHS7kNKONpmwsvaYkFfXyfR+tVquU4kxi
      mO56J2SlseocKpUc4+t/H47o42DgoeU4ikOdBYSUEKhlcizGGNjhpyG6LwK9zwNXvwd37vXR
      bp+ECTPGVLEr2808+pxs1LXsAXWcabI7ERwboTD9AJRBVwZMxd26FuwkM87s+w2JAIwxLC0t
      4ejoKPPGQZ1FEzIQUOofldXWKS+JVUEQwPM8pGmKvb290sou3ZJD5rWs4Cvl/EEFKfexvDJ1
      wlQqFRVG/KBgKiZtA71XwOuXIABVzpJ8K3R5IREEHQFoPktLSyrYzAzqA7LFGSIUtP76s/rz
      ukGDMabCmXWxtmhf9DGUuRbLRJY3nBJMIOU0z9i8kokUYc/zcnN3iYJ1Op1CqrvIDY0kGhBF
      A+ZZL2NMJemEYai4EXkkGWMIgmBh8WsRYIzBYQICHEKcUEndxq4fRJuDzyQeNshSaimBhsrW
      UE1PfR/MfincWs/vXkQRj+N47oYa07ql+wiANygHAKAOOd1XS0Dym14xOuv9snfcLkKNKfpQ
      1zlMmPopYiX36ohC4bzj8RjNZnOusNR5gZQSiWSg4CIaq3nRXhbk2fcJ9Jqh5hzMGzfNYgKM
      TQvvUs447QEVK9DLMNKe6/4KqlCncyNCKHF8gQdLpgGWJhK84UUgAt/3sbS0lBkXUmSStDmO
      zgp0L3JRm+S1tim9FNt+9+5dbG1tFeaxvt5QxvRISE4Hz2bxsUG321Xx/Hqq5WQyUbndk8kE
      w+EQFy5cmBuHTjBsSLobh/iR538HnDH8qyc/gOZx5pr5HL37hnGE2YAUIsLg4XCITqcDYDoZ
      ohRFh+c8D1elUrHelLlIv2maolqt4sKFC7h///4bztlmUswsBKXfTJ+NCaPRCKurq6o0C1l5
      2u02arUafN9Ho9HA0tISGstt/Mp4B/+v04Fw5teFCJBtLFJKvBp2cHcywJ1xH6/FIbjr4GP9
      e/jEYBfMcpPQG5oDACcKVZqm6kaYg4MDlR1069YtPPnkk9a6QJxzBEFgTbY5LUg5LR5L9XXy
      nssDchJtbm5if39/5rK3LxWQuDEZj1CrBZlZYjbIo/5kjj6qcXSSEG+tralEKJ2KVyoVPDfc
      x6/tvgwA+Ir2Bby5OltYjfaT9pt0QtLz3r60jb/78FeAM4anG6t4friPv/3CRwEAP//Wb8Cb
      aidXK8Vx/MZHAABKDCJPKDC19CRJglarlVkRgqxDdJnHecF5mDIJSIZ+I4hAnHP0O/fgxAcI
      xwFqy48gNZRGE8qImJxzdESMn3jx9xGKBP/lo+/EO5e256xJnHM83lzDk8cZWw/XWoCc/k4V
      J0ipJuJGifoUFgMAP3IcPzQcDrFWraPuTHWJjUYTa8sn/pgwDN/4CEDWE7qxngZP1HJ9fX2m
      kKopTpCd+zwRQEqpFNyzii9pmmJlZQUHBweF1e0eNEgpUXEZ0lhCxCHyXOM69SYKbELCgDvR
      ANteBeAcHucYC6Cm3Rlgrl+dOfjH198D4Lj4LqYI+Kmju/hnN/4U37T1OL5563E4joMgCNT7
      tjqx7XYbbxVL+M2v/m4wMFxaWp4xnQdB8MZGgKOjIxwcHGB1dVV5cSnmg0IdKPmaSnonSYKN
      jY2ZzdELrZ4XmHE6ZwXycpdxxhHy6aEK5Ng6yxyFEKgtbSH1K2BuDWkOkyME+N3DW7g56uJb
      tx5Hg50cJ8dx8A9e/iN8preLb926jh+48BT++VMfxCCNcMk/uStBb48ICln56HvOOf63W8/h
      k53XcCfs49svv7n0PDnnuNrOLtXyhkaAyWSC1dVV9Ho9dLtdZeOt1WqqbN7FixcRhqHy6g4G
      A6yvr88srud50wv2FrxPIA9Ma9BZkIAcRubVniZ4nofRaIS9vT3lR5BSKufehQsXcsvFZ4GO
      eKmQYJXlKUUv4HADkeBX776EWApsVxv44Nq1GQdYmE7HFYoElUoFm6yKtTSdifGieVGpe/JT
      EBC3/7at67g7GeCbNx+bii7nxIHfsI4wYEqRjo6OlK2Yc67keQp9oHvCSE5M0xTLy1PFSV+c
      OI7R6XRmFE1KvKFECTrUk8lEeT/J5qwDObj0+4vPuhGccxweHmJ9fT2TklNIR6PRULoDUUgh
      BP7/9q5kuY3rip4eMDQmAqBMiFQ5sRLHqcoqlWU2yTb/kH0+LJWqfEoW2biSSlaW6ci2KFMg
      GmhM3UA3soDP5e3H1yBAUxIB8mwkYmg0yHffu8O5537zzTf47MUxsmSItHyy1cQYz1liOQ/h
      VztYORYd1x+hF5sEro6Dv373b7yahPjLy9/hs2YHi+USq+U66A2zBf41fIvfn/wc3Voj575y
      sadpKpQW/l71yC1+nq7rVKtV1Gq1e1EDfNAGYEOWZZhMJvIL1PA8D61WS3YRTZderdbjNSmP
      DqxPGJ4sZJayFW82m4me//Pnz2/cg14Qd1WK0GC26/LyEsfHx9Lip7/b1dUVTk5OrBkXz/Pg
      ORnS878DyzHc3h+wCD7f+Jme5yEevMIyGcOvNFDt/FI+01ZB1cUmk8i2WGX42//+hXAxx59f
      /ha/evb81o2hqIo8n89zqeZarYYkScSdZUGRGaCfggftAtlAcaYgCDAYDHJGkKaplNyTJJEA
      mCiVSlK9BNYLuV6vXwdEvi8qys+ePRN5PhNFuyR/vosh0JU5OTnBaDRCkiQS55BNmWXZDfeB
      WFdL1X3d8nm8T7/axHIxhV9p5ohyttebpDLeNwBMV0tczMfIsMJ30yG+cE63qjbbXsONy3HW
      0oicGqNlGslromLcXfFRTgDdvHxXsBI5HA5vzB+o1WpCOGPRJMsyXF1dCYdfX2dXLBaLHKWg
      KJi76/VJAxmPx0iSBK1WC/1+H71erzCbxfvwVjO46RjjZQPVoJhvxNc7jgPXWY/Msha7HGdt
      TLcQ4FqtFv75w2sMkhn++OJzNKrBnXfnoqIbM4L8mZXoXaeEanwUA7iP4IXXSZIkR5UA1juI
      HrMDrBftYDBArVYT92kXnpD2f+l/82fTAHRQa3MpgLyiWRHo249GI3S7Xes923ZR13UxGAzQ
      7XYLg+pt4pYFMvz33QVcB/jNszN4sJ8CQRBICtckmz10fBQX6L5K/yx0NRqNXLWXk2BarZZU
      /TzPE5eiUqlgMBjstDtrn5dkONsp1u/3EQQBhsOhuGLT6RSdTicnN05GKbMZSZJY2a18vMj1
      sSHLMnS7XVF6tlHKzQCXj+c+O02x/FE9Ol2t4KuFXSqVUC6XpZfADJD3BXsXA9jAgshoNJLH
      SJ1gEU3HA4wjRqPRzi6KDghttQA+zp4EZi2Gw6EEcRRyHY/H0qgzm81uGMBkMsnN5d0VZFQW
      0RRMNqWJhl/GLzqfwHUcBH5J4iSyM+8jCP3Y2LssEGB3oZbLpah+aVBl2NbRNJ1OMZlMNtIa
      zOeoT8ppkDzutUukW+70NXRPM+9fu1Om67BtrFTkzlBgSg+Ys71X/2sD1Zodx5HBGoeCvTsB
      mEfeNoheLBa5oJXgLg2sWyi3BefT8lQhtG5pUf5c34OoEhR8j/tIFPA6t9HCb1vQ5N3s0ji0
      L9ifaOVH2Hb/1Wolc8jIsuT/OfLH9sen4tymngIzwGVDfpFUoa1voeh7bPpMPq8lxgkdD2i1
      PPP5NE3x7NkzDAaDnRQTXNeF56zgIs19330KbrfF3p0ArAbSBeHxz7GctoW3aSdl8YzaQXEc
      53xmvRi1/3/X3ZTYZABxHEs2iX27s9lM7jEMQzQaDWG6Atfs2FKphH6/L/FEs9nE6ekpvv/+
      +8I0qrmpOKsU0Q//AVYZGp/8GrVa9yAXP7CHBgBct9OR20PNH8330T4vO8fox5pggMx8sm3X
      JXzfl8HctpTkfSAIAsxmM3GTKBcehqGwYqfTqSgfl8tljEYjMRrf9zEej0VflUVBEgtNIzCr
      ukAmeX/XuRmbHBL2MggGrgshURTdIFDZ+Po0kk2zhIH1IGwdExRx/00f/T74QBqsE5gzETR0
      sK2pCnxcz/fisOkwDEUGRkPfv+M4cLJ4LUF//By+f/dC00PH3po2U4qcWXXbbswhG7d1XWn+
      EP1eW/Bni0Pus1GG34ecoH6/Lwuc98M0pL5PpidZAON9UmDAVsQzv5/v+wgaHdSPPjnoxQ/s
      qQuk4fu+UIM5QRC4/uOavBXKbhQd66wR0O0gdF+spju8r04uvfOTsdrv9yW4164N75vV5yiK
      8PLly9yipkSJDmaLThZyoH4KxWBfsPcGQNeGi5vFJ+0OaEynU1GhLloA1WoVlUpFdIVslVOd
      fTFdSJ3vvyt0PWE2m8mOX6lUUCqVREAqDMOc6prv+7nKsa7SpmkqExU3+fW7aHLuO/beAAjH
      WfcDlMtlWeSME0xwQVGSo+h6lPvgYtI7PunWi8XiRuELuEkvoHqC5ieZYM+rqcRmi1s4eJxD
      REyQN6QzPBQNvri4QK/X20ivOOTAV2Nvg+BtUFQdZhHMdV2hQ9tAv57pUdYT6EdrhTXbNbSr
      RMpDkiRYLBZoNps3FqBJkKOkOxf7tkiSRPSHtHHSReTnb6pVVCoVqyjuoeFgTgDi1atXcF0X
      nU5H3BCmLa+uroQWEIYhgiDA+fk5Tk9PZZIgcD1vlu4E+ehMSfI10kb4o2thLib9M42J/jzT
      lJxzoF/PBVsul8UItlmINE4aDL8PjZBth51OB69fv0av15M+av06YpPk+KHg4AwgjmNkWSY7
      LeXTz87OZNEOBgPpLPJ9Xxpr6EMzW8KA8+RkPVWci4PvJZiuLJI3MdO0wPWwZ3OEqPl/zjjQ
      jT2bYLsHfUqVSiVEUYRPP/0UV1dXmEwmaLVaudQoM09PBrCH6Ha7kgPnwqnVami321gsFiLL
      R40h0qPTNEUQBDmFhel0Kjx3zry1LTAGrHzeRrzT+XkbzCBbZ5l0Aa/IZdEMVf055vvIYRoM
      Bmg2m2i320iSBF9//bUE08dHVaSjbzBd/QyNztlBG8FBxwDcefUiuLy8zLU6spZgqgqbGI/H
      UmU23Qu9KJm14e/UvIddgkvGDkWpS96H4zg4Pz/H0dGRpITjOJbqNv8/mUyEG1Sv10WuvVwu
      o9PpXGed3vwD6fQCbrmFzud/2nok1D7i4E4ADXPnyrIM3377LdrtNhzHQRzHCIJApktuAgNY
      M8XJ4heNgEEr6Rc292dbsAVQK0CYbhKvXavVZOgHTyvOAKDcCmOYMAwRRRGCIBC2rD7pvOox
      0tklvOCTg979gQM/AUxQOiQMQ3FlTk9PZajypoXKAFMP8ObjlCvRn6NPBk2Z2NUY6LJpl8jm
      Bmk1ak5lodtHN4r3xaEXpErEcZzX5AfgIIPnl9FstQ46JXrQJ4AJx3HQ6/WEVUkj0MWxTe+l
      flC1WhWlai4sPSmGE8nvo0pMN8hGvdDQo5uAtSwgBXx5cpi7uW4wzzXruC48rySp4kPGYX87
      A1zE3CW1O8FJLre93/M8+L6PZrOJKIqwWq0QhiEuLy8RxzHevXuHyWSCfr+PKIrw9u1beX+W
      Zej3+zvxhfQi1cHxNqcVd3kucPMaDNzr9Xru/bVaDc1m84kKcYgoWnykV2ta9G1gBgUA6vU6
      xuOxSLHM53PMZjOJG5iZKpfLePPmjezQQRCg3++Lqh2DcfYNNxoNKZCtVivx6ZnNse3sXPxA
      foaZzhRNp1NpbDdxm4EdEh6VAeid3+aeTKfTnfLtZ2dnsttGUSTVVVZhgTzN2HXXY1WDIEAU
      RaKqwMVWrVaxXC5v9CNoLSO6JXxPlmWS5WG6VVeg9Xfn/dDQgWvi233TufcFjyoIBq45OaPR
      yCqt2Ol0durFJbWACg+aFl2U9zcXm37NZDIRnpH5Hp4Ey+Uyt+vbWjHNyjRdID17y2TO0niO
      jo623gj2HY/jnFNgoYodZBo6Jtg2gGV1lTl43Szvum5uhyXM62u3rF6v55iqzOnTlTJfz3vQ
      3CQWAc3vzeDc7AfQ35vu1WPBo3KBCK0T5HlejuTGBcsU4TZKCPTDWYTizq+ryqZfbbJFbdek
      oTA7RXqGrR2TIO+J17i6upLA3fd9OWF4z67rYjQaCc2aysyMY8ipOlQ8OhfIBHdMFpHofjA7
      QunuXa5HdWOTim2yPc34QIMZGqZTtzmR9JxcGmKSJPA8T6ThqeTGinUQBCIorPsb2JP8xRdf
      HHQ26NEbAHCtNTQcDnOLlt1h1Wp1p12QadXhcHjD1dFaQNoA9PU1g5XX28YAyCzVcQivNx6P
      US6XpVIdx7EQ7TigYjgcirAwFex6vd5Bu0RPBqDADjBtBL7v4/j4eGc3gMM9tMRKUaeYLSjW
      yhPbLH5N5eY19SRLLayrCXvmrAMmAg5519d4dEHwJnieh263m6MFLJfLO41Z5emhd8+iCfO2
      oJhGqB+3nRYA5Jo6e6UXtWaI6vSp2a9wyL5+EZ4MwABbK3WGiDPIdgWzQ7qaSzfEhA6KWQTT
      rxuPx/jqq6/gui6+/PJLUcDTfj21gQDkgnc9cE5/XtHp8liKYMAjzQLdBsdxZI6Afuwu12E/
      ghbhZRxg291t3V+u6yKOY8xmM5mU+e7dO8znc7TbbVxeXqLX6yGKImn2IWmPY2RNbpKZ/rQ9
      /hjweEx9RzAfTiW2uwaC7Duu1+s5HZ/JZGLl9lPyxIbj42Ocn58LD4nzD4bDoVSRl8slzs7O
      sFgs8OLFi0JpdO0eFWkfPQY8BcEbQPmQ+8iCZFkmcuzAunWThTJzwITZY0y3yPM8TCYTmXV2
      cXGBTqeDarWaixk4fGMwGODs7EzSqbryXST25TjOnYL+fcWTAXxArFYr6Sybz+cya4D8fC50
      GoGOQ2yuiRbGYg3AZqw0NqZDW62WnEaaN0SXrdVqvd9fxAPCUwzwgeF5nswY5uLzPE+KZBT2
      YtZGS6LoE4GcHgrkUqPIZgB6g6Nolj4BSJlm78Bjygg9GcAHxMXFhSgukHfjuq7k6ynYxVZN
      AKJH1Gg0bkyS57xctkAWxQ46wObnMt5gJolB/2KxEE7TY8CTAXxApGmKKIoku0QiHQW8KETl
      +74EtSxMsWuNbgqrxXwN06u2FKZJk+bPfB/7ljmP7D462fYFTzHABwQD4DAMRXyXA/LYG8Be
      ADJCSdJjvMDFz+c4lZIENluuX8cPumLMDNBoNMoN6Gs2mzfo2IeKpxPgPUP702w9pKgtXSFN
      O+CAb9YDmBECrglydJ2SJJGBF2SKcmfnoud1iirKZK3q+IIEukOYAnkbnk6A94wityRJEkRR
      ZJ1Gw8LXcrmUXV3v4Gxz5L+aNQpcDwbUswJIbiMRjnTwOI5zjfMJn1EyAAABP0lEQVQAxAXb
      JB780EBWL7NqpH9rarqt3vF0ArxnFNEKSqWSZG64UxNc5GEYSipUN7IzFjC5PPraJNIxxUrO
      P2eN6fkH0+lUTicuJAAPtiuM35VyNGmaYj6f56Rq+BpqpaZpikqlgmaz+WQADwFmapPQrZSc
      fsNuLgbA+j3M/2/qAeYfn1RoLZ4Vx7HIvNAITON6CKD6hnYN9e+QpxvnJujndDVcEx2BJwP4
      aGBwq31uVobp81Oxmnl7rfBAsLNr0+ckSYIgCMQ90AEzFwsn7DDI5u76EFwg9ldMp1O8fftW
      hnVTfY99F+12G1EUSX9Du93ObQw2o3aiKFo9Fu73Q8JsNhPZFKYwueC2YWPqYpgN2sC038uM
      km6WYd9xo9GQYhqLaw9BF5SqG5SF0bs/vwcVuoHrjUMrcwDXOrAa/wdayybth4pR0gAAAABJ
      RU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
